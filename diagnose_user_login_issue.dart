import 'dart:io';
import 'package:supabase_flutter/supabase_flutter.dart';

// Script para diagnosticar problemas de login de usu√°rio espec√≠fico
void main() async {
  print('üîç ========== DIAGN√ìSTICO DE PROBLEMA DE LOGIN ==========');
  print('üîç Data/Hora: ${DateTime.now().toIso8601String()}');
  print('');
  
  // Solicitar o email do usu√°rio
  print('üìß Digite o email do usu√°rio que est√° com problema de login:');
  final String? email = stdin.readLineSync();
  
  if (email == null || email.isEmpty) {
    print('‚ùå Email n√£o fornecido. Saindo...');
    exit(1);
  }
  
  print('üîç Investigando problema de login para: $email');
  print('');
  
  try {
    // Inicializar Supabase
    print('üì° Inicializando conex√£o com Supabase...');
    
    // Voc√™ pode definir essas vari√°veis de ambiente ou substituir pelos valores
    const supabaseUrl = String.fromEnvironment('SUPABASE_URL');
    const supabaseKey = String.fromEnvironment('SUPABASE_ANON_KEY');
    
    if (supabaseUrl.isEmpty || supabaseKey.isEmpty) {
      print('‚ùå SUPABASE_URL e SUPABASE_ANON_KEY devem ser definidas como vari√°veis de ambiente');
      print('   Execute: export SUPABASE_URL="sua_url" && export SUPABASE_ANON_KEY="sua_key"');
      exit(1);
    }
    
    await Supabase.initialize(
      url: supabaseUrl,
      anonKey: supabaseKey,
    );
    
    final client = Supabase.instance.client;
    print('‚úÖ Conex√£o estabelecida com sucesso');
    print('');
    
    // 1. Verificar se existe na tabela auth.users
    print('üîç 1. VERIFICANDO TABELA AUTH.USERS');
    print('   Executando: SELECT * FROM auth.users WHERE email = \'$email\'');
    
    try {
      final authUsersResult = await client.rpc('check_auth_user', params: {
        'user_email': email,
      });
      
      print('   Resultado: $authUsersResult');
      
      if (authUsersResult == null || authUsersResult.isEmpty) {
        print('‚ùå PROBLEMA IDENTIFICADO: Usu√°rio N√ÉO existe na tabela auth.users');
        print('   Isso significa que a conta nunca foi criada ou foi deletada');
        print('   SOLU√á√ÉO: O usu√°rio precisa se cadastrar novamente');
        return;
      } else {
        print('‚úÖ Usu√°rio existe na tabela auth.users');
        final userData = authUsersResult;
        print('   ID: ${userData['id']}');
        print('   Email: ${userData['email']}');
        print('   Email Confirmado: ${userData['email_confirmed_at']}');
        print('   Criado em: ${userData['created_at']}');
        print('   √öltimo login: ${userData['last_sign_in_at']}');
        print('   Provider: ${userData['app_metadata']?['provider']}');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro ao consultar auth.users: $e');
      print('   Tentando m√©todo alternativo...');
      
      // M√©todo alternativo: tentar fazer login
      try {
        print('üîç Tentando verificar exist√™ncia atrav√©s de reset de senha...');
        await client.auth.resetPasswordForEmail(email);
        print('‚úÖ Email existe (reset de senha aceito)');
      } catch (resetError) {
        if (resetError.toString().contains('User not found')) {
          print('‚ùå PROBLEMA IDENTIFICADO: Usu√°rio N√ÉO existe');
          print('   SOLU√á√ÉO: O usu√°rio precisa se cadastrar');
          return;
        } else {
          print('‚úÖ Email provavelmente existe (outro tipo de erro no reset)');
        }
      }
    }
    
    print('');
    
    // 2. Verificar se existe na tabela profiles
    print('üîç 2. VERIFICANDO TABELA PROFILES');
    print('   Executando: SELECT * FROM profiles WHERE email = \'$email\'');
    
    try {
      final profileResult = await client
          .from('profiles')
          .select('*')
          .eq('email', email)
          .maybeSingle();
      
      if (profileResult == null) {
        print('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Usu√°rio existe em auth.users mas N√ÉO tem perfil');
        print('   Isso pode causar problemas de login');
        print('   SOLU√á√ÉO: Criar perfil manualmente ou trigger n√£o funcionou');
      } else {
        print('‚úÖ Perfil existe na tabela profiles');
        print('   ID: ${profileResult['id']}');
        print('   Email: ${profileResult['email']}');
        print('   Nome: ${profileResult['name']}');
        print('   Criado em: ${profileResult['created_at']}');
        print('   N√≠vel: ${profileResult['level']}');
        print('   Status: ${profileResult['status']}');
      }
    } catch (e) {
      print('‚ùå Erro ao consultar profiles: $e');
    }
    
    print('');
    
    // 3. Verificar pol√≠ticas RLS
    print('üîç 3. VERIFICANDO POL√çTICAS RLS');
    
    try {
      final rls = await client.rpc('check_rls_policies');
      print('   Pol√≠ticas RLS ativas: $rls');
    } catch (e) {
      print('‚ö†Ô∏è Erro ao verificar pol√≠ticas RLS: $e');
      print('   Isso pode indicar problema de permiss√µes');
    }
    
    print('');
    
    // 4. Verificar se o email est√° sendo usado com provider diferente
    print('üîç 4. VERIFICANDO PROVIDERS DE AUTENTICA√á√ÉO');
    
    try {
      final providers = await client.rpc('check_user_providers', params: {
        'user_email': email,
      });
      
      print('   Providers encontrados: $providers');
      
      if (providers != null && providers.isNotEmpty) {
        for (final provider in providers) {
          print('   - Provider: ${provider['provider']}');
          print('   - ID: ${provider['provider_id']}');
        }
        
        // Se tem provider Google/Apple mas est√° tentando login com senha
        final hasOAuth = providers.any((p) => 
          p['provider'] == 'google' || p['provider'] == 'apple');
        
        if (hasOAuth) {
          print('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Usu√°rio criou conta com Google/Apple');
          print('   Mas est√° tentando fazer login com email/senha');
          print('   SOLU√á√ÉO: Usar o bot√£o "Entrar com Google/Apple"');
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro ao verificar providers: $e');
    }
    
    print('');
    
    // 5. Verificar se o email foi confirmado
    print('üîç 5. VERIFICANDO STATUS DE CONFIRMA√á√ÉO DO EMAIL');
    
    try {
      final confirmStatus = await client.rpc('check_email_confirmation', params: {
        'user_email': email,
      });
      
      if (confirmStatus != null && confirmStatus['email_confirmed_at'] == null) {
        print('‚ùå PROBLEMA IDENTIFICADO: Email N√ÉO foi confirmado');
        print('   O usu√°rio precisa verificar o email antes de fazer login');
        print('   SOLU√á√ÉO: Reenviar email de confirma√ß√£o');
      } else {
        print('‚úÖ Email foi confirmado');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro ao verificar confirma√ß√£o de email: $e');
    }
    
    print('');
    
    // 6. Teste de login simulado
    print('üîç 6. TESTE DE LOGIN SIMULADO');
    print('   NOTA: Este teste N√ÉO vai funcionar pois n√£o temos a senha');
    print('   Mas podemos verificar o tipo de erro retornado');
    
    try {
      await client.auth.signInWithPassword(
        email: email,
        password: 'senha_teste_invalida_123',
      );
    } catch (e) {
      print('   Erro esperado: $e');
      
      if (e.toString().contains('Invalid login credentials')) {
        print('‚úÖ Usu√°rio existe (erro de credenciais inv√°lidas √© esperado)');
      } else if (e.toString().contains('User not found')) {
        print('‚ùå PROBLEMA CONFIRMADO: Usu√°rio n√£o existe');
      } else if (e.toString().contains('Email not confirmed')) {
        print('‚ùå PROBLEMA CONFIRMADO: Email n√£o foi confirmado');
      } else {
        print('‚ö†Ô∏è Erro inesperado: investigar mais');
      }
    }
    
    print('');
    print('üîç ========== RESUMO DO DIAGN√ìSTICO ==========');
    print('Email investigado: $email');
    print('Data/Hora: ${DateTime.now().toIso8601String()}');
    print('');
    print('PR√ìXIMOS PASSOS:');
    print('1. Verificar se o usu√°rio est√° usando o provider correto (Google/Apple vs Email/Senha)');
    print('2. Verificar se o email foi confirmado');
    print('3. Se necess√°rio, criar manualmente o perfil do usu√°rio');
    print('4. Verificar se n√£o h√° problemas de RLS/permiss√µes');
    print('5. Se tudo falhar, pedir para o usu√°rio se cadastrar novamente');
    print('========================================');
    
  } catch (e, stackTrace) {
    print('‚ùå Erro fatal durante o diagn√≥stico: $e');
    print('StackTrace: $stackTrace');
  }
} 