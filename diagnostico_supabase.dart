import 'dart:io';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

// Execute este arquivo com: flutter run -d chrome diagnostico_supabase.dart

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(
    url: const String.fromEnvironment('SUPABASE_URL'),
    anonKey: const String.fromEnvironment('SUPABASE_ANON_KEY'),
  );
  
  print('üîç DIAGN√ìSTICO - Erro de Banco de Dados Supabase');
  print('=' * 60);
  
  diagnosticarErroBancoDados();
  
  print('\nüîß SOLU√á√ïES RECOMENDADAS:');
  print('1. Verificar RLS (Row Level Security) na tabela profiles');
  print('2. Verificar se a tabela auth.users aceita novos registros');
  print('3. Verificar triggers que podem estar falhando');
  print('4. Verificar constraints de tabela');
  print('5. Verificar permiss√µes de inser√ß√£o');
  
  print('\nüìã PR√ìXIMOS PASSOS:');
  print('1. Acessar Supabase Dashboard');
  print('2. Verificar logs de erro detalhados');
  print('3. Verificar estrutura da tabela profiles');
  print('4. Testar inser√ß√£o manual de usu√°rio');
  
  runApp(const DiagnosticoApp());
}

class DiagnosticoApp extends StatelessWidget {
  const DiagnosticoApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Diagn√≥stico Supabase',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const DiagnosticoScreen(),
    );
  }
}

class DiagnosticoScreen extends StatefulWidget {
  const DiagnosticoScreen({Key? key}) : super(key: key);

  @override
  State<DiagnosticoScreen> createState() => _DiagnosticoScreenState();
}

class _DiagnosticoScreenState extends State<DiagnosticoScreen> {
  final _client = Supabase.instance.client;
  String _resultado = 'Clique em Iniciar Diagn√≥stico';
  bool _executando = false;
  double _progresso = 0.0;
  
  Future<void> _executarDiagnostico() async {
    setState(() {
      _executando = true;
      _resultado = 'Executando diagn√≥stico...\n';
      _progresso = 0.0;
    });
    
    try {
      final relatorio = StringBuffer();
      
      // Informa√ß√µes de conex√£o
      relatorio.writeln('=== INFORMA√á√ïES DE CONEX√ÉO ===\n');
      relatorio.writeln('URL: ${_client.supabaseUrl}');
      relatorio.writeln('Sess√£o ativa: ${_client.auth.currentSession != null}');
      if (_client.auth.currentSession != null) {
        relatorio.writeln('Usu√°rio: ${_client.auth.currentUser?.email}');
        relatorio.writeln('ID: ${_client.auth.currentUser?.id}');
      }
      relatorio.writeln('\n-------------------\n');
      
      _atualizarProgresso(0.1);
      
      // 1. Verificar estruturas de tabelas
      relatorio.writeln('=== ESTRUTURAS DE TABELAS ===\n');
      
      final tabelas = [
        'workout_records', 
        'challenge_check_ins', 
        'challenge_progress', 
        'user_progress',
        'challenges',
        'profiles'
      ];
      
      for (int i = 0; i < tabelas.length; i++) {
        final tabela = tabelas[i];
        relatorio.writeln('Tabela: $tabela');
        
        try {
          final colunas = await _client.rpc(
            'get_table_columns', 
            params: {'table_name_param': tabela}
          ).timeout(
            const Duration(seconds: 10),
            onTimeout: () => ['Timeout ao buscar colunas']
          );
          
          relatorio.writeln(colunas);
        } catch (e) {
          relatorio.writeln('Erro ao buscar colunas: $e');
          
          // Tentar m√©todo alternativo
          try {
            final colunas = await _client
                .from(tabela)
                .select()
                .limit(1);
            
            if (colunas is List && colunas.isNotEmpty) {
              relatorio.writeln('Colunas (baseado no primeiro registro):');
              relatorio.writeln(colunas.first.keys.join(', '));
            } else {
              relatorio.writeln('Tabela vazia ou inacess√≠vel');
            }
          } catch (e2) {
            relatorio.writeln('Erro no m√©todo alternativo: $e2');
          }
        }
        
        relatorio.writeln('-------------------\n');
        _atualizarProgresso(0.1 + (i + 1) * 0.05);
      }
      
      // 2. Verificar fun√ß√µes RPC relevantes
      relatorio.writeln('=== FUN√á√ïES RPC ===\n');
      
      final funcoes = [
        'record_challenge_check_in_v2',
        'process_workout_for_dashboard',
        'process_workout_for_ranking',
        'get_dashboard_data',
        'get_current_streak',
        'has_checked_in_today',
        'add_points_to_progress',
        'recalculate_user_challenge_progress'
      ];
      
      for (int i = 0; i < funcoes.length; i++) {
        final funcao = funcoes[i];
        relatorio.writeln('Fun√ß√£o: $funcao');
        
        try {
          // Verificar se a fun√ß√£o existe
          final funcaoExiste = await _client.rpc(
            'function_exists',
            params: {'function_name_param': funcao}
          ).timeout(
            const Duration(seconds: 5),
            onTimeout: () => false
          );
          
          relatorio.writeln('Existe: ${funcaoExiste ?? 'N√£o foi poss√≠vel verificar'}');
          
          if (funcaoExiste == true) {
            // Tentar obter a defini√ß√£o da fun√ß√£o
            try {
              final funcaoDef = await _client.rpc(
                'get_function_definition',
                params: {'function_name_param': funcao}
              ).timeout(
                const Duration(seconds: 10),
                onTimeout: () => 'Timeout ao buscar defini√ß√£o'
              );
              
              relatorio.writeln('Defini√ß√£o (resumo):');
              final defStr = funcaoDef.toString();
              relatorio.writeln(defStr.length > 500 
                ? '${defStr.substring(0, 500)}...' 
                : defStr);
            } catch (e) {
              relatorio.writeln('Erro ao buscar defini√ß√£o: $e');
            }
          }
        } catch (e) {
          relatorio.writeln('Erro ao verificar fun√ß√£o: $e');
        }
        
        relatorio.writeln('-------------------\n');
        _atualizarProgresso(0.4 + (i + 1) * 0.05);
      }
      
      // 3. Verificar triggers
      relatorio.writeln('=== TRIGGERS ===\n');
      
      final tabelasVerificarTriggers = [
        'workout_records', 
        'challenge_check_ins', 
        'challenge_progress', 
        'user_progress'
      ];
      
      for (int i = 0; i < tabelasVerificarTriggers.length; i++) {
        final tabela = tabelasVerificarTriggers[i];
        relatorio.writeln('Triggers para: $tabela');
        
        try {
          final triggers = await _client.rpc(
            'get_table_triggers',
            params: {'table_name_param': tabela}
          ).timeout(
            const Duration(seconds: 10),
            onTimeout: () => ['Timeout ao buscar triggers']
          );
          
          if (triggers is List && triggers.isNotEmpty) {
            for (final trigger in triggers) {
              relatorio.writeln(trigger);
            }
          } else {
            relatorio.writeln('Nenhum trigger encontrado');
          }
        } catch (e) {
          relatorio.writeln('Erro ao buscar triggers: $e');
        }
        
        relatorio.writeln('-------------------\n');
        _atualizarProgresso(0.6 + (i + 1) * 0.025);
      }
      
      // 4. Verificar registros recentes
      relatorio.writeln('=== REGISTROS RECENTES ===\n');
      
      // 4.1 Treinos recentes
      relatorio.writeln('Treinos recentes:');
      try {
        final treinos = await _client
            .from('workout_records')
            .select('id, user_id, workout_name, workout_type, date, duration_minutes, created_at')
            .order('created_at', ascending: false)
            .limit(5);
        
        if (treinos is List && treinos.isNotEmpty) {
          for (final treino in treinos) {
            relatorio.writeln(treino);
          }
        } else {
          relatorio.writeln('Nenhum treino encontrado');
        }
      } catch (e) {
        relatorio.writeln('Erro ao buscar treinos: $e');
      }
      relatorio.writeln('-------------------\n');
      
      _atualizarProgresso(0.7);
      
      // 4.2 Check-ins recentes
      relatorio.writeln('Check-ins recentes:');
      try {
        final checkins = await _client
            .from('challenge_check_ins')
            .select('id, user_id, challenge_id, check_in_date, points, workout_id, created_at')
            .order('created_at', ascending: false)
            .limit(5);
        
        if (checkins is List && checkins.isNotEmpty) {
          for (final checkin in checkins) {
            relatorio.writeln(checkin);
          }
        } else {
          relatorio.writeln('Nenhum check-in encontrado');
        }
      } catch (e) {
        relatorio.writeln('Erro ao buscar check-ins: $e');
      }
      relatorio.writeln('-------------------\n');
      
      _atualizarProgresso(0.8);
      
      // 4.3 Atualiza√ß√µes recentes de progresso
      relatorio.writeln('Progresso de desafios recente:');
      try {
        final progresso = await _client
            .from('challenge_progress')
            .select('id, user_id, challenge_id, points, check_ins_count, consecutive_days, updated_at')
            .order('updated_at', ascending: false)
            .limit(5);
        
        if (progresso is List && progresso.isNotEmpty) {
          for (final p in progresso) {
            relatorio.writeln(p);
          }
        } else {
          relatorio.writeln('Nenhum progresso encontrado');
        }
      } catch (e) {
        relatorio.writeln('Erro ao buscar progresso: $e');
      }
      relatorio.writeln('-------------------\n');
      
      _atualizarProgresso(0.9);
      
      // 5. Verificar logs de erros
      relatorio.writeln('=== LOGS DE ERROS ===\n');
      try {
        final erros = await _client
            .from('check_in_error_logs')
            .select('id, user_id, challenge_id, workout_id, error_message, created_at')
            .order('created_at', ascending: false)
            .limit(10);
        
        if (erros is List && erros.isNotEmpty) {
          for (final erro in erros) {
            relatorio.writeln(erro);
          }
        } else {
          relatorio.writeln('Nenhum erro encontrado');
        }
      } catch (e) {
        relatorio.writeln('Tabela de logs n√£o encontrada ou erro: $e');
      }
      
      _atualizarProgresso(1.0);
      
      // Salvar relat√≥rio em arquivo
      try {
        final arquivo = File('diagnostico_supabase_${DateTime.now().millisecondsSinceEpoch}.txt');
        await arquivo.writeAsString(relatorio.toString());
        
        setState(() {
          _resultado = 'Diagn√≥stico conclu√≠do!\n\nRelat√≥rio salvo em: ${arquivo.path}\n\n============ RELAT√ìRIO ============\n\n${relatorio.toString()}';
          _executando = false;
        });
      } catch (e) {
        setState(() {
          _resultado = 'Diagn√≥stico conclu√≠do, mas n√£o foi poss√≠vel salvar em arquivo: $e\n\n============ RELAT√ìRIO ============\n\n${relatorio.toString()}';
          _executando = false;
        });
      }
    } catch (e) {
      setState(() {
        _resultado = 'Erro ao executar diagn√≥stico: $e';
        _executando = false;
      });
    }
  }
  
  void _atualizarProgresso(double valor) {
    if (mounted) {
      setState(() {
        _progresso = valor;
      });
    }
  }

  /// Verifica se h√° fun√ß√µes RPC utilit√°rias necess√°rias para o diagn√≥stico
  /// e cria elas temporariamente se n√£o existirem
  Future<void> _verificarCriarFuncoesUtilitarias() async {
    // Fun√ß√£o para verificar se uma fun√ß√£o existe
    try {
      await _client.rpc('function_exists', params: {'function_name_param': 'get_dashboard_data'});
      print('Fun√ß√£o function_exists j√° existe');
    } catch (e) {
      print('Criando fun√ß√£o function_exists...');
      try {
        // Criar fun√ß√£o tempor√°ria
        await _client.rpc('create_function_exists');
      } catch (e) {
        print('Erro ao criar function_exists: $e');
      }
    }
    
    // Fun√ß√£o para obter colunas de uma tabela
    try {
      await _client.rpc('get_table_columns', params: {'table_name_param': 'workout_records'});
      print('Fun√ß√£o get_table_columns j√° existe');
    } catch (e) {
      print('Criando fun√ß√£o get_table_columns...');
      try {
        // Criar fun√ß√£o tempor√°ria
        await _client.rpc('create_get_table_columns');
      } catch (e) {
        print('Erro ao criar get_table_columns: $e');
      }
    }
    
    // Fun√ß√£o para obter triggers de uma tabela
    try {
      await _client.rpc('get_table_triggers', params: {'table_name_param': 'workout_records'});
      print('Fun√ß√£o get_table_triggers j√° existe');
    } catch (e) {
      print('Criando fun√ß√£o get_table_triggers...');
      try {
        // Criar fun√ß√£o tempor√°ria
        await _client.rpc('create_get_table_triggers');
      } catch (e) {
        print('Erro ao criar get_table_triggers: $e');
      }
    }
    
    // Fun√ß√£o para obter defini√ß√£o de uma fun√ß√£o
    try {
      await _client.rpc('get_function_definition', params: {'function_name_param': 'get_dashboard_data'});
      print('Fun√ß√£o get_function_definition j√° existe');
    } catch (e) {
      print('Criando fun√ß√£o get_function_definition...');
      try {
        // Criar fun√ß√£o tempor√°ria
        await _client.rpc('create_get_function_definition');
      } catch (e) {
        print('Erro ao criar get_function_definition: $e');
      }
    }
  }

  @override
  void initState() {
    super.initState();
    // Verificar e criar fun√ß√µes utilit√°rias necess√°rias
    _verificarCriarFuncoesUtilitarias();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Diagn√≥stico Supabase - Ray Club App'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'An√°lise de Problemas no Dashboard e Ranking',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Este diagn√≥stico coletar√° informa√ß√µes sobre tabelas, fun√ß√µes RPC e dados recentes para identificar problemas na atualiza√ß√£o do dashboard e ranking.',
                      style: TextStyle(fontSize: 14),
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton.icon(
                      onPressed: _executando ? null : _executarDiagnostico,
                      icon: Icon(_executando ? Icons.hourglass_empty : Icons.play_arrow),
                      label: Text(_executando ? 'Executando...' : 'Iniciar Diagn√≥stico'),
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size(double.infinity, 48),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            if (_executando)
              Column(
                children: [
                  LinearProgressIndicator(value: _progresso),
                  const SizedBox(height: 8),
                  Text('Progresso: ${(_progresso * 100).toStringAsFixed(0)}%'),
                  const SizedBox(height: 16),
                ],
              ),
            Expanded(
              child: Card(
                elevation: 4,
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: SingleChildScrollView(
                    child: SelectableText(
                      _resultado,
                      style: const TextStyle(fontFamily: 'monospace'),
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            if (!_executando)
              ElevatedButton.icon(
                onPressed: () {
                  // Copiar resultado para a √°rea de transfer√™ncia
                  final data = ClipboardData(text: _resultado);
                  Clipboard.setData(data);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Resultado copiado para a √°rea de transfer√™ncia'))
                  );
                },
                icon: const Icon(Icons.copy),
                label: const Text('Copiar Resultado'),
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 48),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

// Extens√µes √∫teis para o Supabase
extension SupabaseClientExtension on SupabaseClient {
  // M√©todo para executar RPC com valida√ß√£o de UUIDs
  Future<dynamic> rpcWithValidUuids(String function, {Map<String, dynamic>? params}) async {
    // Converter UUIDs para string
    if (params != null) {
      params.forEach((key, value) {
        if (value != null && value is String && _isUuid(value)) {
          // Garantir que o UUID seja v√°lido
          params[key] = value.replaceAll('-', '').toLowerCase();
        }
      });
    }
    
    return rpc(function, params: params);
  }
  
  // Verificar se uma string √© um UUID v√°lido
  bool _isUuid(String str) {
    final uuidPattern = RegExp(
      r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',
      caseSensitive: false
    );
    return uuidPattern.hasMatch(str);
  }
}

void diagnosticarErroBancoDados() {
  print('\nüéØ ERRO ATUAL IDENTIFICADO:');
  print('‚ùå Code: 500');
  print('‚ùå Message: Database error saving new user');
  print('');
  print('üí° SIGNIFICADO:');
  print('- Apple Sign In funciona ‚úÖ');
  print('- Supabase aceita o token ‚úÖ');
  print('- Erro ao inserir usu√°rio na tabela ‚ùå');
  
  print('\nüîç POSS√çVEIS CAUSAS:');
  print('1. üõ°Ô∏è  RLS (Row Level Security) muito restritivo');
  print('2. üìã Trigger falhando na tabela profiles');
  print('3. üóÉÔ∏è  Constraint/valida√ß√£o de campo falhando');
  print('4. üîë Campo obrigat√≥rio faltando (email, etc.)');
  print('5. üìä Problema de schema/estrutura da tabela');
  print('6. üîí Permiss√µes insuficientes para auth.users');
  
  print('\nüéØ √ÅREAS PARA VERIFICAR NO SUPABASE:');
  print('üîç Table Editor ‚Üí auth.users');
  print('üîç Table Editor ‚Üí public.profiles');
  print('üîç Authentication ‚Üí Settings');
  print('üîç Database ‚Üí Functions (triggers)');
  print('üîç Logs ‚Üí Ver erros detalhados');
  
  print('\nüìù INFORMA√á√ïES DO USU√ÅRIO APPLE:');
  print('üë§ User ID: 000212.6a49ad8ab54345e599af07eb43121ce8.2028');
  print('üìß Email: n√£o fornecido (pode ser o problema!)');
  print('üìõ Nome: vazio');
  print('');
  print('‚ö†Ô∏è  POSS√çVEL PROBLEMA: Email √© obrigat√≥rio mas Apple n√£o forneceu');
} 