-- ================================================================
-- SCRIPT MASTER PARA IMPLEMENTA√á√ÉO DO SISTEMA ROBUSTO
-- Execute este script para implementar todas as prote√ß√µes
-- ================================================================

\timing on

DO $$
BEGIN
    RAISE NOTICE 'üöÄ ===== INICIANDO IMPLEMENTA√á√ÉO DO SISTEMA ROBUSTO =====';
    RAISE NOTICE 'Timestamp: %', NOW();
    RAISE NOTICE '';
    RAISE NOTICE '‚ö†Ô∏è  IMPORTANTE: Este processo ir√°:';
    RAISE NOTICE '1. Limpar todas as fun√ß√µes conflitantes existentes';
    RAISE NOTICE '2. Implementar fun√ß√µes robustas com prote√ß√µes multicamadas';
    RAISE NOTICE '3. Criar sistema de monitoramento proativo';
    RAISE NOTICE '4. Executar verifica√ß√£o completa de sa√∫de';
    RAISE NOTICE '';
    RAISE NOTICE 'Estimativa de tempo: 2-5 minutos';
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
END $$;

-- ================================================================
-- PASSO 1: LIMPEZA DE FUN√á√ïES CONFLITANTES
-- ================================================================

\echo ''
\echo 'üßπ PASSO 1: LIMPEZA DE FUN√á√ïES CONFLITANTES'
\echo '============================================'

-- Executar limpeza das fun√ß√µes conflitantes
\i cleanup_conflicting_functions.sql

-- ================================================================
-- PASSO 2: IMPLEMENTA√á√ÉO DAS FUN√á√ïES ROBUSTAS
-- ================================================================

\echo ''
\echo 'üõ°Ô∏è PASSO 2: IMPLEMENTA√á√ÉO DAS FUN√á√ïES ROBUSTAS'
\echo '==============================================='

-- Executar implementa√ß√£o das fun√ß√µes robustas
\i final_robust_sql_functions.sql

-- ================================================================
-- PASSO 3: VERIFICA√á√ÉO DE SA√öDE DO SISTEMA
-- ================================================================

\echo ''
\echo 'üîç PASSO 3: VERIFICA√á√ÉO DE SA√öDE DO SISTEMA'
\echo '============================================'

-- Executar verifica√ß√£o completa
\i run_system_health_check.sql

-- ================================================================
-- PASSO 4: TESTES FUNCIONAIS B√ÅSICOS
-- ================================================================

\echo ''
\echo '‚úÖ PASSO 4: TESTES FUNCIONAIS B√ÅSICOS'
\echo '======================================'

DO $$
DECLARE
    test_result JSONB;
    test_user_id UUID := 'test-user-' || gen_random_uuid();
    test_success BOOLEAN := TRUE;
BEGIN
    RAISE NOTICE 'Executando testes funcionais b√°sicos...';
    RAISE NOTICE '';
    
    -- TESTE 1: Fun√ß√£o record_workout_basic existe e funciona
    BEGIN
        RAISE NOTICE 'üß™ Teste 1: Fun√ß√£o record_workout_basic';
        
        -- Tentar chamar a fun√ß√£o (sem inserir dados reais)
        SELECT record_workout_basic(
            test_user_id,
            'Teste Funcional',
            'Teste',
            30,
            NOW(),
            NULL,
            NULL,
            'Teste automatizado'
        ) INTO test_result;
        
        -- Verificar se retornou resposta v√°lida
        IF (test_result->>'success') IS NOT NULL THEN
            RAISE NOTICE '‚úÖ record_workout_basic: Funcionando';
        ELSE
            RAISE NOTICE '‚ùå record_workout_basic: Resposta inv√°lida';
            test_success := FALSE;
        END IF;
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå record_workout_basic: Erro - %', SQLERRM;
        test_success := FALSE;
    END;
    
    -- TESTE 2: Fun√ß√£o detect_system_anomalies
    BEGIN
        RAISE NOTICE 'üß™ Teste 2: Fun√ß√£o detect_system_anomalies';
        
        PERFORM detect_system_anomalies();
        RAISE NOTICE '‚úÖ detect_system_anomalies: Funcionando';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå detect_system_anomalies: Erro - %', SQLERRM;
        test_success := FALSE;
    END;
    
    -- TESTE 3: Fun√ß√£o system_health_report
    BEGIN
        RAISE NOTICE 'üß™ Teste 3: Fun√ß√£o system_health_report';
        
        PERFORM system_health_report();
        RAISE NOTICE '‚úÖ system_health_report: Funcionando';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå system_health_report: Erro - %', SQLERRM;
        test_success := FALSE;
    END;
    
    -- Resultado dos testes
    RAISE NOTICE '';
    IF test_success THEN
        RAISE NOTICE 'üéâ TODOS OS TESTES PASSARAM COM SUCESSO!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  ALGUNS TESTES FALHARAM - Revise a implementa√ß√£o';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- PASSO 5: CONFIGURA√á√ïES FINAIS E OTIMIZA√á√ïES
-- ================================================================

\echo ''
\echo '‚öôÔ∏è PASSO 5: CONFIGURA√á√ïES FINAIS'
\echo '================================='

DO $$
BEGIN
    RAISE NOTICE 'Aplicando configura√ß√µes finais...';
    
    -- Atualizar estat√≠sticas das tabelas para melhor performance
    ANALYZE workout_records;
    ANALYZE challenge_check_ins;
    ANALYZE check_in_error_logs;
    ANALYZE workout_processing_queue;
    
    RAISE NOTICE '‚úÖ Estat√≠sticas das tabelas atualizadas';
    
    -- Verificar √≠ndices importantes
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_workout_records_user_date') THEN
        CREATE INDEX CONCURRENTLY idx_workout_records_user_date 
        ON workout_records(user_id, DATE(date));
        RAISE NOTICE '‚úÖ √çndice idx_workout_records_user_date criado';
    ELSE
        RAISE NOTICE '‚úÖ √çndice idx_workout_records_user_date j√° existe';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- RESUMO FINAL E PR√ìXIMOS PASSOS
-- ================================================================

DO $$
DECLARE
    total_functions INTEGER;
    total_tables INTEGER;
    system_status TEXT;
BEGIN
    RAISE NOTICE 'üìã ===== RESUMO DA IMPLEMENTA√á√ÉO =====';
    RAISE NOTICE '';
    
    -- Contar fun√ß√µes implementadas
    SELECT COUNT(*) INTO total_functions
    FROM pg_proc 
    WHERE proname IN ('record_workout_basic', 'detect_system_anomalies', 'system_health_report');
    
    -- Contar tabelas de monitoramento
    SELECT COUNT(*) INTO total_tables
    FROM information_schema.tables 
    WHERE table_name IN ('check_in_error_logs', 'workout_processing_queue', 'workout_system_metrics');
    
    RAISE NOTICE '‚úÖ Fun√ß√µes principais implementadas: %/3', total_functions;
    RAISE NOTICE '‚úÖ Tabelas de monitoramento: %/3', total_tables;
    
    -- Determinar status do sistema
    IF total_functions = 3 AND total_tables >= 2 THEN
        system_status := 'IMPLEMENTA√á√ÉO COMPLETA';
        RAISE NOTICE '';
        RAISE NOTICE 'üéâ %', system_status;
        RAISE NOTICE '';
        RAISE NOTICE '‚úÖ Sistema robusto implementado com sucesso!';
        RAISE NOTICE '‚úÖ Prote√ß√µes multicamadas ativas';
        RAISE NOTICE '‚úÖ Monitoramento proativo funcionando';
        RAISE NOTICE '‚úÖ Pronto para uso em produ√ß√£o';
        RAISE NOTICE '';
        RAISE NOTICE 'üì± PR√ìXIMOS PASSOS NO FLUTTER:';
        RAISE NOTICE '1. Implementar RobustWorkoutRecordViewModel';
        RAISE NOTICE '2. Atualizar providers para usar nova implementa√ß√£o';
        RAISE NOTICE '3. Executar testes automatizados';
        RAISE NOTICE '4. Monitorar m√©tricas nos primeiros dias';
        
    ELSE
        system_status := 'IMPLEMENTA√á√ÉO PARCIAL';
        RAISE NOTICE '';
        RAISE NOTICE '‚ö†Ô∏è  %', system_status;
        RAISE NOTICE '';
        RAISE NOTICE 'Alguns componentes podem n√£o ter sido implementados corretamente.';
        RAISE NOTICE 'Revise os logs acima para identificar problemas.';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìä COMANDOS √öTEIS PARA MONITORAMENTO DI√ÅRIO:';
    RAISE NOTICE '';
    RAISE NOTICE '-- Verificar sa√∫de do sistema:';
    RAISE NOTICE 'SELECT * FROM system_health_report();';
    RAISE NOTICE '';
    RAISE NOTICE '-- Detectar anomalias:';
    RAISE NOTICE 'SELECT * FROM detect_system_anomalies();';
    RAISE NOTICE '';
    RAISE NOTICE '-- Verifica√ß√£o completa:';
    RAISE NOTICE '\\i run_system_health_check.sql';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã DOCUMENTA√á√ÉO:';
    RAISE NOTICE 'Consulte PLANO_PREVENCAO_ERROS_FUTURAS.md para detalhes';
    RAISE NOTICE '';
    RAISE NOTICE '===== IMPLEMENTA√á√ÉO CONCLU√çDA =====';
    RAISE NOTICE 'Timestamp: %', NOW();
    RAISE NOTICE '';
END $$;

\timing off

\echo ''
\echo 'üöÄ IMPLEMENTA√á√ÉO CONCLU√çDA!'
\echo 'Consulte os logs acima para verificar o status de cada componente.'
\echo '' 