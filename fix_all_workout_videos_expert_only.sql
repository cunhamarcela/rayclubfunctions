-- ========================================
-- FOR√áAR TODOS OS V√çDEOS A EXIGIR ACESSO EXPERT
-- ========================================
-- Este script garante que TODOS os v√≠deos de treino sejam bloqueados para usu√°rios basic

-- 1. Verificar estado atual dos v√≠deos
SELECT 
  id,
  title,
  category,
  instructor_name,
  requires_expert_access,
  is_new,
  is_popular
FROM workout_videos 
ORDER BY category, title;

-- 2. FOR√áAR TODOS OS V√çDEOS A EXIGIREM ACESSO EXPERT
UPDATE workout_videos 
SET requires_expert_access = true,
    updated_at = NOW()
WHERE requires_expert_access = false;

-- 3. Verificar quantos v√≠deos foram atualizados
SELECT 
  'Total de v√≠deos configurados como Expert' as status,
  COUNT(*) as total
FROM workout_videos 
WHERE requires_expert_access = true;

-- 4. Listar todos os v√≠deos agora protegidos
SELECT 
  category,
  COUNT(*) as videos_protegidos
FROM workout_videos 
WHERE requires_expert_access = true
GROUP BY category
ORDER BY category;

-- 5. Criar fun√ß√£o para verificar acesso a v√≠deo
CREATE OR REPLACE FUNCTION check_video_expert_access(
  user_id_param UUID,
  video_id_param TEXT
)
RETURNS BOOLEAN AS $$
DECLARE
  user_level TEXT;
  video_requires_expert BOOLEAN;
  expires_at TIMESTAMP;
BEGIN
  -- Buscar n√≠vel do usu√°rio
  SELECT 
    current_level,
    level_expires_at
  INTO 
    user_level,
    expires_at
  FROM user_progress_level 
  WHERE user_id = user_id_param;
  
  -- Se usu√°rio n√£o existe, √© basic
  IF user_level IS NULL THEN
    user_level := 'basic';
  END IF;
  
  -- Verificar se acesso expert expirou
  IF expires_at IS NOT NULL AND expires_at < NOW() THEN
    user_level := 'basic';
  END IF;
  
  -- Buscar se v√≠deo requer acesso expert
  SELECT requires_expert_access
  INTO video_requires_expert
  FROM workout_videos
  WHERE id = video_id_param;
  
  -- Se v√≠deo n√£o encontrado, negar acesso
  IF video_requires_expert IS NULL THEN
    RETURN false;
  END IF;
  
  -- ‚ö†Ô∏è REGRA CR√çTICA: Se v√≠deo requer expert, usu√°rio DEVE ser expert
  IF video_requires_expert = true THEN
    RETURN user_level = 'expert';
  END IF;
  
  -- Se v√≠deo n√£o requer expert, liberar (n√£o deveria existir mais)
  RETURN true;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. Atualizar fun√ß√£o de verifica√ß√£o de acesso global
CREATE OR REPLACE FUNCTION can_user_access_video_link(
  user_id_param UUID,
  video_id_param TEXT
)
RETURNS BOOLEAN AS $$
BEGIN
  -- Usar fun√ß√£o espec√≠fica de verifica√ß√£o expert
  RETURN check_video_expert_access(user_id_param, video_id_param);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 7. Verificar se fun√ß√µes funcionam corretamente
-- Teste com usu√°rio expert (substitua o UUID pelo ID real)
SELECT 
  'Teste acesso expert' as teste,
  check_video_expert_access('01d4a292-1873-4af6-948b-a55eed56d6b9', 'any-video-id') as resultado;

-- 8. Garantir RLS (Row Level Security) nos v√≠deos
ALTER TABLE workout_videos ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica: Usu√°rios podem ver v√≠deos, mas acesso ao conte√∫do √© controlado pela aplica√ß√£o
DROP POLICY IF EXISTS "Usu√°rios podem ver lista de v√≠deos" ON workout_videos;
CREATE POLICY "Usu√°rios podem ver lista de v√≠deos" ON workout_videos
    FOR SELECT USING (true);

-- ========================================
-- VERIFICA√á√ïES FINAIS
-- ========================================

-- Confirmar que todos os v√≠deos agora exigem expert
SELECT 
  CASE 
    WHEN COUNT(*) = 0 THEN '‚úÖ SUCESSO: Todos os v√≠deos protegidos'
    ELSE '‚ùå ERRO: Ainda h√° v√≠deos sem prote√ß√£o'
  END as status_seguranca,
  COUNT(*) as videos_desprotegidos
FROM workout_videos 
WHERE requires_expert_access = false;

-- Mostrar estat√≠sticas finais
SELECT 
  'üìä ESTAT√çSTICAS FINAIS' as resumo,
  (SELECT COUNT(*) FROM workout_videos) as total_videos,
  (SELECT COUNT(*) FROM workout_videos WHERE requires_expert_access = true) as videos_protegidos,
  (SELECT COUNT(*) FROM user_progress_level WHERE current_level = 'expert') as usuarios_expert;

-- ========================================
-- LOGS PARA DEBUG
-- ========================================

-- Log de todas as altera√ß√µes feitas
INSERT INTO public.app_logs (
  level,
  message,
  metadata,
  created_at
) VALUES (
  'INFO',
  'Todos os v√≠deos de treino foram configurados para exigir acesso Expert',
  jsonb_build_object(
    'total_videos', (SELECT COUNT(*) FROM workout_videos),
    'videos_protegidos', (SELECT COUNT(*) FROM workout_videos WHERE requires_expert_access = true),
    'action', 'force_expert_access_on_all_videos'
  ),
  NOW()
);

-- ========================================
-- RESUMO EXECUTIVO
-- ========================================

/*
‚úÖ A√á√ïES EXECUTADAS:

1. üîí TODOS OS V√çDEOS PROTEGIDOS
   - requires_expert_access = true para TODOS os v√≠deos
   - N√£o h√° mais v√≠deos acess√≠veis para usu√°rios basic

2. üõ°Ô∏è FUN√á√ïES DE VERIFICA√á√ÉO CRIADAS
   - check_video_expert_access() - Verifica√ß√£o rigorosa
   - can_user_access_video_link() - Interface para o app

3. üîê REGRAS DE SEGURAN√áA
   - Usu√°rio DEVE ser 'expert' para acessar qualquer v√≠deo
   - Acesso expert n√£o pode estar expirado
   - Em caso de d√∫vida, acesso √© NEGADO

4. üìä ROW LEVEL SECURITY
   - Usu√°rios podem ver lista de v√≠deos (para UI)
   - Controle de acesso ao conte√∫do via aplica√ß√£o

‚ö†Ô∏è IMPORTANTE: 
- Usu√°rios basic agora N√ÉO podem reproduzir NENHUM v√≠deo
- Apenas usu√°rios expert t√™m acesso completo
- Sistema fail-safe: erro = acesso negado
*/ 