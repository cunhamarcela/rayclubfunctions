import 'dart:io';

void main() {
  print('üîß CORRE√á√ÉO AUTOM√ÅTICA - APPLE SIGN IN');
  print('=' * 50);
  
  fixEntitlementsReference();
  print('\n‚úÖ CORRE√á√ïES CONCLU√çDAS!');
  print('\nüéØ INSTRU√á√ïES MANUAIS NO XCODE:');
  print('1. Abra o Xcode com: open ios/Runner.xcworkspace');
  print('2. Selecione o target "Runner"');
  print('3. V√° para "Signing & Capabilities"');
  print('4. Certifique-se que:');
  print('   ‚úì Team est√° selecionado');
  print('   ‚úì Bundle Identifier = com.rayclub.app');
  print('   ‚úì "Sign In with Apple" capability est√° adicionada');
  print('5. Se "Sign In with Apple" n√£o estiver presente:');
  print('   - Clique no bot√£o "+" (Capability)');
  print('   - Procure por "Sign In with Apple"');
  print('   - Adicione a capability');
  print('\nüçé APPLE DEVELOPER CONSOLE:');
  print('1. Acesse: https://developer.apple.com/account/');
  print('2. V√° para: Certificates, Identifiers & Profiles');
  print('3. Clique em: Identifiers');
  print('4. Procure: com.rayclub.app');
  print('5. Certifique-se que "Sign In with Apple" est√° ‚úì habilitado');
  print('6. Se n√£o estiver, marque a checkbox e salve');
  
  print('\n‚ö†Ô∏è  IMPORTANTE:');
  print('- Teste SEMPRE em dispositivo REAL (n√£o simulador)');
  print('- Certifique-se que est√° logado com Apple ID no dispositivo');
  print('- O erro Code=1000 geralmente √© de configura√ß√£o no Dev Console');
}

void fixEntitlementsReference() {
  print('\nüîß Corrigindo refer√™ncia aos entitlements...');
  
  final pbxprojFile = File('ios/Runner.xcodeproj/project.pbxproj');
  if (!pbxprojFile.existsSync()) {
    print('‚ùå Arquivo project.pbxproj n√£o encontrado');
    return;
  }
  
  String content = pbxprojFile.readAsStringSync();
  
  // Verificar se a refer√™ncia j√° existe
  if (content.contains('CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements')) {
    print('‚úÖ Refer√™ncia aos entitlements j√° existe');
    return;
  }
  
  // Adicionar refer√™ncia aos entitlements para configura√ß√µes Debug, Release e Profile
  final configs = ['Debug', 'Release', 'Profile'];
  bool modified = false;
  
  for (final config in configs) {
    // Procurar por se√ß√µes de buildSettings para o target Runner
    final pattern = RegExp(
      r'(buildSettings = \{[^}]*PRODUCT_BUNDLE_IDENTIFIER = com\.rayclub\.app[^}]*)',
      multiLine: true,
      dotAll: true
    );
    
    content = content.replaceAllMapped(pattern, (match) {
      String buildSettings = match.group(1)!;
      
      // Se j√° n√£o cont√©m CODE_SIGN_ENTITLEMENTS, adicionar
      if (!buildSettings.contains('CODE_SIGN_ENTITLEMENTS')) {
        buildSettings = buildSettings.replaceFirst(
          'PRODUCT_BUNDLE_IDENTIFIER = com.rayclub.app;',
          'CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;\n\t\t\t\tPRODUCT_BUNDLE_IDENTIFIER = com.rayclub.app;'
        );
        modified = true;
        print('‚úÖ Adicionada refer√™ncia aos entitlements para configura√ß√£o $config');
      }
      
      return buildSettings;
    });
  }
  
  if (modified) {
    // Fazer backup do arquivo original
    final backupFile = File('ios/Runner.xcodeproj/project.pbxproj.backup');
    backupFile.writeAsStringSync(pbxprojFile.readAsStringSync());
    print('üìÑ Backup criado: project.pbxproj.backup');
    
    // Escrever o arquivo modificado
    pbxprojFile.writeAsStringSync(content);
    print('‚úÖ Arquivo project.pbxproj atualizado');
  } else {
    print('‚ÑπÔ∏è  Nenhuma modifica√ß√£o necess√°ria no project.pbxproj');
  }
} 