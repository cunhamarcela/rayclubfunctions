-- =====================================================================================
-- SCRIPT: CORRE√á√ÉO DE CHECK-INS PR√â-DESAFIO
-- Descri√ß√£o: Remove APENAS check-ins registrados antes do in√≠cio oficial do desafio
-- Data: 2025-01-XX
-- Problema: 101 check-ins inv√°lidos gerando 1010 pontos incorretos para 92 usu√°rios
-- IMPORTANTE: Treinos em workout_records podem existir antes do desafio (s√£o leg√≠timos)
--            O problema s√£o apenas os CHECK-INS que geram pontos indevidos
-- =====================================================================================

-- Constantes do desafio
DO $$
DECLARE
    challenge_uuid UUID := '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'::UUID;
    challenge_start_date TIMESTAMP WITH TIME ZONE := '2025-05-26 00:00:00-03'::TIMESTAMP WITH TIME ZONE;
    usuarios_afetados INTEGER;
    checkins_removidos INTEGER;
    pontos_removidos INTEGER;
BEGIN
    RAISE NOTICE 'üöÄ INICIANDO CORRE√á√ÉO DE CHECK-INS PR√â-DESAFIO';
    RAISE NOTICE 'üìÖ Desafio ID: %', challenge_uuid;
    RAISE NOTICE 'üìÖ Data in√≠cio oficial: %', challenge_start_date;
    RAISE NOTICE '';

    -- ETAPA 1: An√°lise inicial dos check-ins inv√°lidos
    RAISE NOTICE 'üîç ETAPA 1: AN√ÅLISE DE CHECK-INS INV√ÅLIDOS';
    
    SELECT COUNT(DISTINCT user_id), COUNT(*), SUM(points)
    INTO usuarios_afetados, checkins_removidos, pontos_removidos
    FROM challenge_check_ins 
    WHERE challenge_id = challenge_uuid 
    AND check_in_date < challenge_start_date;
    
    RAISE NOTICE 'üë• Usu√°rios afetados: %', usuarios_afetados;
    RAISE NOTICE 'üìä Check-ins inv√°lidos: %', checkins_removidos;
    RAISE NOTICE 'üí∞ Pontos indevidos: %', pontos_removidos;
    RAISE NOTICE '';

    -- ETAPA 2: Backup dos dados que ser√£o removidos
    RAISE NOTICE 'üíæ ETAPA 2: CRIANDO BACKUP DOS DADOS';
    
    -- Criar tabela de backup se n√£o existir
    CREATE TABLE IF NOT EXISTS challenge_check_ins_backup_pre_challenge AS
    SELECT *, NOW() as backup_timestamp, 'pre_challenge_fix' as backup_reason
    FROM challenge_check_ins 
    WHERE 1=0; -- Estrutura sem dados

    -- Inserir dados no backup
    INSERT INTO challenge_check_ins_backup_pre_challenge
    SELECT *, NOW(), 'pre_challenge_fix'
    FROM challenge_check_ins 
    WHERE challenge_id = challenge_uuid 
    AND check_in_date < challenge_start_date;
    
    RAISE NOTICE '‚úÖ Backup criado: challenge_check_ins_backup_pre_challenge';
    RAISE NOTICE '';

    -- ETAPA 3: Remover check-ins inv√°lidos
    RAISE NOTICE 'üóëÔ∏è ETAPA 3: REMOVENDO CHECK-INS INV√ÅLIDOS';
    
    DELETE FROM challenge_check_ins 
    WHERE challenge_id = challenge_uuid 
    AND check_in_date < challenge_start_date;
    
    GET DIAGNOSTICS checkins_removidos = ROW_COUNT;
    RAISE NOTICE '‚úÖ Check-ins removidos: %', checkins_removidos;
    RAISE NOTICE '';

    -- ETAPA 4: Recalcular progresso dos usu√°rios afetados
    RAISE NOTICE 'üîÑ ETAPA 4: RECALCULANDO PROGRESSO DOS USU√ÅRIOS';
    
    -- Usar a fun√ß√£o existente de rec√°lculo
    PERFORM recalculate_challenge_progress_complete_fixed(user_id, challenge_uuid)
    FROM (
        SELECT DISTINCT user_id 
        FROM challenge_check_ins_backup_pre_challenge 
        WHERE backup_reason = 'pre_challenge_fix'
    ) affected_users;
    
    RAISE NOTICE '‚úÖ Progresso recalculado para % usu√°rios', usuarios_afetados;
    RAISE NOTICE '';

    -- ETAPA 5: Verifica√ß√£o final
    RAISE NOTICE 'üîç ETAPA 5: VERIFICA√á√ÉO FINAL';
    
    SELECT COUNT(*)
    INTO checkins_removidos
    FROM challenge_check_ins 
    WHERE challenge_id = challenge_uuid 
    AND check_in_date < challenge_start_date;
    
    RAISE NOTICE 'üìä Check-ins pr√©-desafio restantes: % (deve ser 0)', checkins_removidos;
    
    -- Estat√≠sticas finais
    SELECT COUNT(DISTINCT user_id), COUNT(*), COALESCE(SUM(points), 0)
    INTO usuarios_afetados, checkins_removidos, pontos_removidos
    FROM challenge_check_ins 
    WHERE challenge_id = challenge_uuid;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìà ESTAT√çSTICAS FINAIS DO DESAFIO:';
    RAISE NOTICE 'üë• Usu√°rios participando: %', usuarios_afetados;
    RAISE NOTICE 'üìä Check-ins v√°lidos: %', checkins_removidos;
    RAISE NOTICE 'üí∞ Pontos v√°lidos: %', pontos_removidos;
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!';
    
END $$;

-- =====================================================================================
-- CONSULTA DE VERIFICA√á√ÉO: Execute ap√≥s o script para confirmar
-- =====================================================================================

-- Verificar se ainda h√° check-ins pr√©-desafio
SELECT 
    'üîç VERIFICA√á√ÉO P√ìS-CORRE√á√ÉO' as status,
    COUNT(*) as checkins_pre_desafio_restantes,
    COUNT(DISTINCT user_id) as usuarios_afetados
FROM challenge_check_ins 
WHERE challenge_id = '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'
AND check_in_date < '2025-05-26 00:00:00-03';

-- Ver dados do backup criado
SELECT 
    'üíæ DADOS NO BACKUP' as status,
    COUNT(*) as checkins_backupeados,
    COUNT(DISTINCT user_id) as usuarios_backupeados,
    SUM(points) as pontos_backupeados,
    MIN(check_in_date) as primeiro_checkin_invalido,
    MAX(check_in_date) as ultimo_checkin_invalido
FROM challenge_check_ins_backup_pre_challenge 
WHERE backup_reason = 'pre_challenge_fix';

-- Estat√≠sticas finais do desafio
SELECT 
    'üìä DESAFIO LIMPO' as status,
    COUNT(DISTINCT user_id) as usuarios_participando,
    COUNT(*) as checkins_validos,
    SUM(points) as pontos_validos,
    MIN(check_in_date) as primeiro_checkin_valido,
    MAX(check_in_date) as ultimo_checkin
FROM challenge_check_ins 
WHERE challenge_id = '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'; 