/// Mapeamento entre modalidades de exerc√≠cio (registro) e categorias de metas
/// 
/// **Data:** 2025-01-21 √†s 15:20
/// **Objetivo:** Conectar automaticamente exerc√≠cios registrados √†s metas correspondentes
/// **Refer√™ncia:** Sistema de metas autom√°tico Ray Club

class WorkoutCategoryMapping {
  /// Mapa que conecta modalidades de exerc√≠cio (tela de registro) 
  /// com categorias de metas (dashboard fitness)
  static const Map<String, String> exerciseToGoalCategory = {
    // Modalidades de Exerc√≠cio ‚Üí Categorias de Metas
    
    // üèÉ‚Äç‚ôÄÔ∏è Atividades Cardiovasculares
    'Corrida': 'corrida',
    'Caminhada': 'caminhada', 
    'Ciclismo': 'ciclismo',
    'Cardio': 'cardio',
    'HIIT': 'hiit',
    'Dan√ßa': 'danca',
    
    // üßò‚Äç‚ôÄÔ∏è Atividades de Flexibilidade/Bem-estar
    'Yoga': 'yoga',
    'Pilates': 'pilates',
    'Alongamento': 'alongamento',
    
    // üí™ Atividades de For√ßa
    'Muscula√ß√£o': 'musculacao',
    'Funcional': 'funcional',
    'CrossFit': 'crossfit',
    
    // üèä‚Äç‚ôÄÔ∏è Outras atividades
    'Nata√ß√£o': 'natacao',
    'Luta': 'luta',
    'Fisioterapia': 'fisioterapia',
    
    // ‚ö° Gen√©ricos (fallback)
    'Treino': 'geral',
    'Exerc√≠cio': 'geral',
    'Outro': 'geral',
  };

  /// Categorias v√°lidas para metas (baseado na tela de cria√ß√£o de metas)
  static const List<String> validGoalCategories = [
    'corrida',
    'caminhada', 
    'yoga',
    'funcional',
    'musculacao',
    'natacao',
    'ciclismo',
    'crossfit',
    'pilates',
    'alongamento',
    'cardio',
    'hiit',
    'danca',
    'luta',
    'fisioterapia',
    'geral',
  ];

  /// Converte uma modalidade de exerc√≠cio para categoria de meta
  /// 
  /// **Exemplo:**
  /// ```dart
  /// getGoalCategory('Corrida') // retorna 'corrida'
  /// getGoalCategory('Treino Funcional') // retorna 'funcional' 
  /// getGoalCategory('Modalidade Inexistente') // retorna 'geral'
  /// ```
  static String getGoalCategory(String exerciseType) {
    if (exerciseType.isEmpty) return 'geral';
    
    // Primeiro, tentar match exato
    final exactMatch = exerciseToGoalCategory[exerciseType];
    if (exactMatch != null) return exactMatch;
    
    // Se n√£o encontrar, tentar match parcial (case insensitive)
    final lowerExerciseType = exerciseType.toLowerCase();
    
    for (final entry in exerciseToGoalCategory.entries) {
      if (lowerExerciseType.contains(entry.key.toLowerCase()) ||
          entry.key.toLowerCase().contains(lowerExerciseType)) {
        return entry.value;
      }
    }
    
    // Fallback para categoria geral
    return 'geral';
  }

  /// Verifica se uma categoria de meta √© v√°lida
  static bool isValidGoalCategory(String category) {
    return validGoalCategories.contains(category.toLowerCase());
  }

  /// Obt√©m lista de modalidades que mapeiam para uma categoria espec√≠fica
  static List<String> getExerciseTypesForCategory(String goalCategory) {
    return exerciseToGoalCategory.entries
        .where((entry) => entry.value == goalCategory)
        .map((entry) => entry.key)
        .toList();
  }

  /// Lista todas as modalidades de exerc√≠cio dispon√≠veis
  static List<String> get allExerciseTypes => exerciseToGoalCategory.keys.toList();
  
  /// Lista todas as categorias de meta dispon√≠veis  
  static List<String> get allGoalCategories => validGoalCategories;
} 