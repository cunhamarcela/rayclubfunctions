import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Extens√£o para adicionar m√©todos √∫teis ao SupabaseClient
extension SupabaseClientExtension on SupabaseClient {
  /// Vers√£o melhorada do m√©todo rpc que garante que os UUIDs estejam em formato v√°lido
  /// Este m√©todo √© equivalente ao rpc padr√£o, mas foi criado para manter compatibilidade
  /// com c√≥digo que possa estar esperando este m√©todo espec√≠fico.
  Future<dynamic> rpcWithValidUuids(
    String functionName, {
    Map<String, dynamic>? params,
    bool get = false,
  }) async {
    try {
      debugPrint('üîÑ [DIAGN√ìSTICO] Iniciando RPC: $functionName');
      if (params != null) {
        debugPrint('üîÑ [DIAGN√ìSTICO] Par√¢metros da RPC: $params');
      }
      
      // Apenas chama o m√©todo rpc padr√£o sem manipula√ß√£o adicional
      final result = await rpc(
      functionName,
      params: params,
      get: get,
    );
      
      debugPrint('‚úÖ [DIAGN√ìSTICO] RPC $functionName conclu√≠da com sucesso');
      return result;
    } catch (e) {
      debugPrint('‚ùå [DIAGN√ìSTICO] Erro na RPC $functionName: $e');
      
      // Verificar se √© um erro de transa√ß√£o PostgreSQL
      if (e is PostgrestException) {
        debugPrint('‚ùå [DIAGN√ìSTICO] PostgrestException: c√≥digo=${e.code}, detalhes=${e.details}');
        
        // Caso espec√≠fico para erro de termina√ß√£o de transa√ß√£o
        if (e.code == '2D000') {
          debugPrint('‚ö†Ô∏è [DIAGN√ìSTICO] Erro de termina√ß√£o de transa√ß√£o detectado');
        }
      }
      
      // Propagar o erro original
      rethrow;
    }
  }
} 