import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:auto_route/auto_route.dart';
import 'providers/user_profile_provider.dart' as profile_providers;
import 'features/workout/providers/user_access_provider.dart';
import 'features/profile/models/profile_model.dart';
import 'core/services/expert_video_guard.dart';

/// Provider para dados crus do banco (debug)
final rawProfileDataProvider = FutureProvider<Map<String, dynamic>?>((ref) async {
  final userId = Supabase.instance.client.auth.currentUser?.id;
  if (userId == null) return null;

  final data = await Supabase.instance.client
      .from('profiles')
      .select('id, name, email, account_type, created_at, updated_at')
      .eq('id', userId)
      .maybeSingle();

  return data;
});

@RoutePage()
class DebugProfileDiagnoseScreen extends ConsumerWidget {
  const DebugProfileDiagnoseScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(title: const Text('üîç DIAGN√ìSTICO COMPLETO')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('üîç DIAGN√ìSTICO COMPLETO - EXPERT/BASIC', 
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 20),
            
            // === USU√ÅRIO ATUAL ===
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üë§ USU√ÅRIO ATUAL', style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    Text('User ID: ${Supabase.instance.client.auth.currentUser?.id ?? "NENHUM"}'),
                    Text('Email: ${Supabase.instance.client.auth.currentUser?.email ?? "NENHUM"}'),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // === DADOS CRUS DO BANCO ===
            Card(
              color: Colors.red.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üóÑÔ∏è DADOS CRUS DO BANCO', 
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    
                    Consumer(
                      builder: (context, ref, _) {
                        final rawDataAsync = ref.watch(rawProfileDataProvider);
                        return rawDataAsync.when(
                          data: (rawData) => Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('‚úÖ Dados crus do banco:'),
                              if (rawData != null) ...[
                                Text('  üì± ID: ${rawData['id']}'),
                                Text('  üìß Email: ${rawData['email']}'),
                                Text('  üë§ Nome: ${rawData['name']}'),
                                Text('  üéØ account_type (RAW): "${rawData['account_type']}"'),
                                Text('  üìÖ Created: ${rawData['created_at']}'),
                                Text('  üìÖ Updated: ${rawData['updated_at']}'),
                                const SizedBox(height: 10),
                                Text('üîç AN√ÅLISE DOS DADOS CRUS:'),
                                Text('  ‚Ä¢ Campo account_type existe? ${rawData.containsKey('account_type') ? 'SIM' : 'N√ÉO'}'),
                                Text('  ‚Ä¢ Valor: "${rawData['account_type']}"'),
                                Text('  ‚Ä¢ Tipo: ${rawData['account_type'].runtimeType}'),
                                Text('  ‚Ä¢ √â expert? ${rawData['account_type'] == 'expert' ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}'),
                              ] else ...[
                                const Text('‚ùå Dados n√£o encontrados'),
                              ],
                            ],
                          ),
                          loading: () => const Text('‚è≥ Carregando dados crus...'),
                          error: (error, stack) => Text('‚ùå Erro nos dados crus: $error'),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // === NOVO SISTEMA ===
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üÜï NOVO SISTEMA (userProfileProvider)', 
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    
                    // userProfileProvider
                    Consumer(
                      builder: (context, ref, _) {
                        final profileAsync = ref.watch(profile_providers.userProfileProvider);
                        return profileAsync.when(
                          data: (profile) => Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('‚úÖ userProfileProvider - Profile object:'),
                              Text('  üìß Email: ${profile?.email ?? "null"}'),
                              Text('  üë§ Nome: ${profile?.name ?? "null"}'),
                              Text('  üéØ accountType (PROCESSADO): "${profile?.accountType ?? "null"}"'),
                              Text('  üì± ID: ${profile?.id ?? "null"}'),
                              const SizedBox(height: 8),
                              Text('üîç AN√ÅLISE DO PROFILE OBJECT:'),
                              Text('  ‚Ä¢ Profile √© null? ${profile == null ? 'SIM' : 'N√ÉO'}'),
                              if (profile != null) ...[
                                Text('  ‚Ä¢ accountType existe? SIM'),
                                Text('  ‚Ä¢ accountType value: "${profile.accountType}"'),
                                Text('  ‚Ä¢ accountType type: ${profile.accountType.runtimeType}'),
                                Text('  ‚Ä¢ √â expert? ${profile.accountType == 'expert' ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}'),
                              ],
                            ],
                          ),
                          loading: () => const Text('‚è≥ userProfileProvider - Carregando...'),
                          error: (error, stack) => Text('‚ùå userProfileProvider - Erro: $error'),
                        );
                      },
                    ),
                    const SizedBox(height: 10),
                    
                    // isExpertUserProvider (novo)
                    Consumer(
                      builder: (context, ref, _) {
                                                    final isExpertAsync = ref.watch(profile_providers.isExpertUserProfileProvider);
                        return isExpertAsync.when(
                          data: (isExpert) => Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('‚úÖ isExpertUserProvider (NOVO): $isExpert'),
                              Text('  üéØ Resultado: ${isExpert ? "EXPERT ‚úÖ" : "BASIC ‚ùå"}'),
                              Text('  üìä Tipo: ${isExpert.runtimeType}'),
                            ],
                          ),
                          loading: () => const Text('‚è≥ isExpertUserProvider - Carregando...'),
                          error: (error, stack) => Text('‚ùå isExpertUserProvider - Erro: $error'),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // === SISTEMA ANTIGO ===
            Card(
              color: Colors.green.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üîÑ SISTEMA ANTIGO (userLevelProvider)', 
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    
                    // userLevelProvider (antigo)
                    Consumer(
                      builder: (context, ref, _) {
                        final userLevelAsync = ref.watch(userLevelProvider);
                        return userLevelAsync.when(
                          data: (level) => Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('‚úÖ userLevelProvider (ANTIGO): "$level"'),
                              Text('  üéØ Resultado: ${level == "expert" ? "EXPERT ‚úÖ" : "BASIC ‚ùå"}'),
                              Text('  üìä Tipo: ${level.runtimeType}'),
                            ],
                          ),
                          loading: () => const Text('‚è≥ userLevelProvider - Carregando...'),
                          error: (error, stack) => Text('‚ùå userLevelProvider - Erro: $error'),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // === TESTE DIRETO BANCO ===
            Card(
              color: Colors.orange.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üóÑÔ∏è TESTE DIRETO DO BANCO', 
                        style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    
                    ElevatedButton(
                      onPressed: () async {
                        await _testDirectDatabase(context);
                      },
                      child: const Text('üîç Verificar Banco Diretamente'),
                    ),
                    const SizedBox(height: 10),
                    
                    ElevatedButton(
                      onPressed: () async {
                        await _testProfileFromJson(context, ref);
                      },
                      child: const Text('üß™ Testar Profile.fromJson()'),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // === BOT√ïES DE A√á√ÉO ===
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üîÑ A√á√ïES', style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    
                    Row(
                      children: [
                        ElevatedButton(
                          onPressed: () {
                                                            ref.invalidate(profile_providers.userProfileProvider);
                            ref.invalidate(rawProfileDataProvider);
                          },
                          child: const Text('üîÑ Refresh Novo'),
                        ),
                        const SizedBox(width: 10),
                        ElevatedButton(
                          onPressed: () {
                            ref.invalidate(userLevelProvider);
                          },
                          child: const Text('üîÑ Refresh Antigo'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            
            // üß™ TESTE DE CLIQUE EM V√çDEO
            Card(
              color: Colors.orange.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('üß™ TESTE DE CLIQUE EM V√çDEO', 
                        style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 12),
                    
                    ElevatedButton(
                      onPressed: () async {
                        print('üß™ [DEBUG] Testando clique em v√≠deo...');
                        
                        try {
                          // Simular um v√≠deo qualquer
                          final testVideoId = 'test-video-123';
                          
                          // Testar canPlayVideo
                          final canPlay = await ExpertVideoGuard.canPlayVideo(ref, testVideoId);
                          print('üß™ [DEBUG] canPlayVideo result: $canPlay');
                          
                          if (canPlay) {
                            print('üß™ [DEBUG] ‚úÖ Usu√°rio pode assistir v√≠deos!');
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('‚úÖ Teste PASSOU - Usu√°rio pode assistir v√≠deos'),
                                backgroundColor: Colors.green,
                              ),
                            );
                          } else {
                            print('üß™ [DEBUG] ‚ùå Usu√°rio N√ÉO pode assistir v√≠deos');
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('‚ùå Teste FALHOU - Usu√°rio n√£o pode assistir v√≠deos'),
                                backgroundColor: Colors.red,
                              ),
                            );
                          }
                        } catch (e) {
                          print('üß™ [DEBUG] ERRO no teste: $e');
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('‚ùå ERRO no teste: $e'),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange,
                        foregroundColor: Colors.white,
                      ),
                      child: const Text('üß™ Testar Clique em V√≠deo'),
                    ),
                    
                    const SizedBox(height: 12),
                    
                    ElevatedButton(
                      onPressed: () async {
                        print('üß™ [DEBUG] Testando handleVideoTap...');
                        
                        try {
                          await ExpertVideoGuard.handleVideoTap(
                            context,
                            ref, 
                            'test-video-456',
                            () {
                              print('üß™ [DEBUG] ‚úÖ onAllowed() foi chamado!');
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('‚úÖ onAllowed() executado com sucesso!'),
                                  backgroundColor: Colors.green,
                                ),
                              );
                            },
                          );
                        } catch (e) {
                          print('üß™ [DEBUG] ERRO no handleVideoTap: $e');
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('‚ùå ERRO no handleVideoTap: $e'),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                      ),
                      child: const Text('üß™ Testar handleVideoTap'),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // üé¨ TESTE ESPEC√çFICO DE CLIQUE NA HOME
            ElevatedButton(
              onPressed: () async {
                debugPrint('üé¨ [DEBUG] ========== TESTE ESPEC√çFICO ==========');
                debugPrint('üé¨ [DEBUG] V√° para a HOME SCREEN e clique em qualquer v√≠deo');
                debugPrint('üé¨ [DEBUG] Procure por estes logs:');
                debugPrint('üé¨ [DEBUG] - üéØ [handleVideoTap] Iniciando verifica√ß√£o');
                debugPrint('üé¨ [DEBUG] - üé¨ [_openVideoPlayer] Abrindo player');
                debugPrint('üé¨ [DEBUG] ========================================');
                
                Navigator.of(context).pushReplacementNamed('/');
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
              ),
              child: const Text('üé¨ IR PARA HOME E TESTAR CLIQUE'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _testProfileFromJson(BuildContext context, WidgetRef ref) async {
    try {
      final rawDataAsync = ref.read(rawProfileDataProvider);
      
      await rawDataAsync.when(
        data: (rawData) async {
          if (rawData == null) {
            _showResult(context, '‚ùå Dados crus n√£o encontrados');
            return;
          }

          // Teste Profile.fromJson diretamente
          final profile = Profile.fromJson(rawData);
          
          _showResult(context, '''
üß™ TESTE PROFILE.fromJSON():

üì¶ DADOS DE ENTRADA:
${rawData.entries.map((e) => '  ‚Ä¢ ${e.key}: "${e.value}" (${e.value.runtimeType})').join('\n')}

üìä PROFILE CRIADO:
  ‚Ä¢ ID: "${profile.id}"
  ‚Ä¢ Name: "${profile.name}"
  ‚Ä¢ Email: "${profile.email}"
  ‚Ä¢ accountType: "${profile.accountType}"
  ‚Ä¢ accountType tipo: ${profile.accountType.runtimeType}

üîç VERIFICA√á√ïES:
  ‚Ä¢ Profile criado com sucesso? SIM ‚úÖ
  ‚Ä¢ accountType preenchido? ${profile.accountType.isNotEmpty ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}
  ‚Ä¢ √â expert? ${profile.accountType == 'expert' ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}
  ‚Ä¢ Compara√ß√£o direta: "${profile.accountType}" == "expert" = ${profile.accountType == 'expert'}
          ''');
        },
        loading: () async {
          _showResult(context, '‚è≥ Aguardando dados crus...');
        },
        error: (error, stack) async {
          _showResult(context, '‚ùå Erro nos dados crus: $error');
        },
      );

    } catch (e) {
      _showResult(context, '‚ùå Erro ao testar Profile.fromJson(): $e');
    }
  }

  Future<void> _testDirectDatabase(BuildContext context) async {
    try {
      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        _showResult(context, '‚ùå Usu√°rio n√£o logado');
        return;
      }

      // Teste 1: Verificar se a tabela profiles tem o campo account_type
      final result = await Supabase.instance.client
          .from('profiles')
          .select('id, name, email, account_type')
          .eq('id', userId)
          .maybeSingle();

      if (result == null) {
        _showResult(context, '‚ùå Perfil n√£o encontrado na tabela profiles');
        return;
      }

      final accountType = result['account_type'];
      
      _showResult(context, '''
‚úÖ RESULTADO DO BANCO:
üìß Email: ${result['email'] ?? 'null'}
üë§ Nome: ${result['name'] ?? 'null'} 
üéØ Account Type: "$accountType"
üì± User ID: ${result['id']}

üîç AN√ÅLISE:
‚Ä¢ Campo account_type existe? ${result.containsKey('account_type') ? 'SIM' : 'N√ÉO'}
‚Ä¢ Valor: ${accountType ?? 'NULL'}
‚Ä¢ √â expert? ${accountType == 'expert' ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}
      ''');

    } catch (e) {
      _showResult(context, '‚ùå Erro ao consultar banco: $e');
    }
  }

  void _showResult(BuildContext context, String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üîç Resultado do Teste'),
        content: SingleChildScrollView(
          child: SelectableText(message),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
} 