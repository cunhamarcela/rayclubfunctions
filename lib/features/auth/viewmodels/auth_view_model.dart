// Package imports:
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import 'package:shared_preferences/shared_preferences.dart';

// Project imports:
import '../../../core/errors/app_exception.dart';
import '../../../core/providers/providers.dart';
import '../../../core/router/app_router.dart';
import '../models/auth_state.dart';
import '../models/user.dart';
import '../repositories/auth_repository.dart';

/// Constante que define o intervalo de verifica√ß√£o peri√≥dica em segundo plano (em minutos)
const int BACKGROUND_AUTH_CHECK_INTERVAL_MINUTES = 30;

/// Provider global para o AuthViewModel
final authViewModelProvider = StateNotifierProvider<AuthViewModel, AuthState>((ref) {
  final repository = ref.watch(authRepositoryProvider);
  return AuthViewModel(repository: repository);
});

/// Provider para o reposit√≥rio de autentica√ß√£o
final authRepositoryProvider = Provider<IAuthRepository>((ref) {
  final supabaseClient = ref.watch(supabaseClientProvider);
  return AuthRepository(supabaseClient);
});

/// ViewModel respons√°vel por gerenciar opera√ß√µes relacionadas √† autentica√ß√£o.
class AuthViewModel extends StateNotifier<AuthState> {
  final IAuthRepository _repository;
  String? _redirectPath;
  Timer? _backgroundAuthCheckTimer;

  AuthViewModel({
    required IAuthRepository repository,
    bool checkAuthOnInit = true,
  })  : _repository = repository,
        super(const AuthState.initial()) {
    if (checkAuthOnInit) {
      checkAuthStatus();
    }
    
    // Iniciar verifica√ß√£o peri√≥dica em segundo plano
    _startBackgroundAuthCheck();
  }

  /// Inicia a verifica√ß√£o peri√≥dica de autentica√ß√£o em segundo plano
  void _startBackgroundAuthCheck() {
    // Cancele qualquer timer existente
    _backgroundAuthCheckTimer?.cancel();
    
    // Crie um novo timer para verifica√ß√£o peri√≥dica
    _backgroundAuthCheckTimer = Timer.periodic(
      Duration(minutes: BACKGROUND_AUTH_CHECK_INTERVAL_MINUTES),
      (_) => _performBackgroundAuthCheck()
    );
    
    debugPrint('üîÑ AuthViewModel: Iniciado verificador peri√≥dico de autentica√ß√£o a cada $BACKGROUND_AUTH_CHECK_INTERVAL_MINUTES minutos');
  }
  
  /// Realiza a verifica√ß√£o de autentica√ß√£o em segundo plano
  /// Esta verifica√ß√£o √© silenciosa e n√£o altera o estado para loading
  Future<void> _performBackgroundAuthCheck() async {
    debugPrint('üîÑ AuthViewModel: Realizando verifica√ß√£o peri√≥dica de autentica√ß√£o em segundo plano');
    
    try {
      // Verificar se h√° um usu√°rio autenticado no estado atual
      final isCurrentlyAuthenticated = state.maybeWhen(
        authenticated: (_) => true,
        orElse: () => false,
      );
      
      // Se n√£o estiver autenticado, n√£o precisamos verificar
      if (!isCurrentlyAuthenticated) {
        debugPrint('üîÑ AuthViewModel: Estado atual n√£o √© autenticado, pulando verifica√ß√£o em segundo plano');
        return;
      }
      
      // Verificar e renovar a sess√£o se necess√°rio, sem alterar o estado para loading
      await verifyAndRenewSession(silent: true);
      
    } catch (e) {
      // Apenas log, sem alterar o estado
      debugPrint('‚ö†Ô∏è AuthViewModel: Erro em verifica√ß√£o de autentica√ß√£o em segundo plano: $e');
    }
  }

  @override
  void dispose() {
    // Cancelar o timer quando o ViewModel for descartado
    _backgroundAuthCheckTimer?.cancel();
    super.dispose();
  }

  /// Obt√©m o caminho para redirecionamento (se existir)
  String? get redirectPath => _redirectPath;

  /// Define o caminho para redirecionamento ap√≥s login
  void setRedirectPath(String path) {
    _redirectPath = path;
  }

  /// Limpa o caminho de redirecionamento
  void clearRedirectPath() {
    _redirectPath = null;
  }

  /// Extrai a mensagem de erro de uma exce√ß√£o
  String _getErrorMessage(dynamic error) {
    if (error is AppException) {
      return error.message;
    }
    return error.toString();
  }

  /// Verifica o status atual de autentica√ß√£o
  Future<void> checkAuthStatus() async {
    // N√£o mudar para loading se j√° estiver autenticado
    // Isso evita flickering de UI desnecess√°rio
    final isCurrentlyAuthenticated = state.maybeWhen(
      authenticated: (_) => true,
      orElse: () => false,
    );
    
    // Se n√£o estiver autenticado, mostrar loading
    if (!isCurrentlyAuthenticated) {
      state = const AuthState.loading();
    }
    
    try {
      // Verificar e renovar a sess√£o se necess√°rio
      final isSessionValid = await verifyAndRenewSession();
      
      // Se j√° tratamos a sess√£o e atualizamos o estado, n√£o precisamos fazer mais nada
      if (isSessionValid) {
        return;
      }
      
      // Caso contr√°rio, verificar se h√° um usu√°rio autenticado
      final user = await _repository.getCurrentUser();
      if (user != null) {
        state = AuthState.authenticated(
          user: AppUser.fromSupabaseUser(user),
        );
      } else {
        state = const AuthState.unauthenticated();
      }
    } catch (e) {
      // Log de erro, mas n√£o alterar estado para erro
      // Isso evita que um erro de verifica√ß√£o de sess√£o bloqueie o app
      print("Erro ao verificar status de autentica√ß√£o: ${e.toString()}");
      // Em caso de erro, considerar como n√£o autenticado
      state = const AuthState.unauthenticated();
    }
  }

  /// Verifica se um email j√° est√° registrado
  Future<bool> isEmailRegistered(String email) async {
    try {
      return await _repository.isEmailRegistered(email);
    } catch (e) {
      // Em caso de erro, assumir que o email j√° existe por precau√ß√£o
      print("Erro ao verificar email: ${e.toString()}");
      return true;
    }
  }

  /// Marca que o usu√°rio j√° viu a introdu√ß√£o
  Future<void> _markIntroAsSeen() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      debugPrint('üí° AuthViewModel: Marcando que o usu√°rio j√° viu a introdu√ß√£o');
      
      // Salvar na SharedPreferences
      final result = await prefs.setBool('has_seen_intro', true);
      if (result) {
        debugPrint('‚úÖ AuthViewModel: Marcado com sucesso que o usu√°rio j√° viu a introdu√ß√£o (SharedPreferences)');
      } else {
        debugPrint('‚ö†Ô∏è AuthViewModel: Falha ao marcar que o usu√°rio j√° viu a introdu√ß√£o');
        // Tentar novamente para garantir
        await prefs.setBool('has_seen_intro', true);
      }
      
      // Salvar tamb√©m no Supabase para garantir persist√™ncia entre dispositivos
      try {
        final user = await _repository.getCurrentUser();
        
        if (user != null) {
          await _repository.updateProfile(onboardingSeen: true);
          debugPrint('‚úÖ AuthViewModel: Marcado com sucesso que o usu√°rio j√° viu a introdu√ß√£o (Supabase)');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è AuthViewModel: Erro ao atualizar onboarding_seen no Supabase: $e');
      }
    } catch (e) {
      debugPrint('‚ùå AuthViewModel: Erro ao marcar introdu√ß√£o como vista: $e');
    }
  }

  /// Realiza login com email e senha
  Future<void> signIn(String email, String password) async {
    try {
      state = const AuthState.loading();
      
      // Verificar formato b√°sico de email
      if (!_isValidEmail(email)) {
        state = const AuthState.error(message: "Por favor, insira um email v√°lido");
        return;
      }
      
      // Verificar senha m√≠nima
      if (password.length < 6) {
        state = const AuthState.error(message: "A senha deve ter pelo menos 6 caracteres");
        return;
      }
      
      debugPrint("üîç AuthViewModel: Iniciando login com email: $email");
      
      // Tentativa de login sem verifica√ß√£o pr√©via de email
      try {
      final user = await _repository.signIn(email, password);
        
        debugPrint("‚úÖ AuthViewModel: Login bem-sucedido: ${user.email}");
      
      // Marcar que o usu√°rio j√° viu a introdu√ß√£o ao logar com sucesso
      await _markIntroAsSeen();
      
        // Atualiza o estado com o usu√°rio autenticado
      state = AuthState.authenticated(
        user: AppUser.fromSupabaseUser(user),
      );
      } catch (loginError) {
        debugPrint("‚ùå AuthViewModel: Erro no login: $loginError");
        
        // Verificar o tipo de erro para dar feedback apropriado
        final errorMsg = _getErrorMessage(loginError);
        
      if (errorMsg.toLowerCase().contains("invalid login credentials") || 
          errorMsg.toLowerCase().contains("email ou senha incorretos")) {
        state = const AuthState.error(message: "Email ou senha incorretos");
        } else if (errorMsg.toLowerCase().contains("user not found") || 
                  errorMsg.toLowerCase().contains("conta n√£o encontrada")) {
          state = const AuthState.error(message: "Conta n√£o encontrada. Verifique seu email ou crie uma nova conta.");
      } else if (errorMsg.toLowerCase().contains("network")) {
        state = const AuthState.error(message: "Erro de conex√£o. Verifique sua internet e tente novamente");
      } else {
        state = AuthState.error(message: errorMsg);
      }
      }
    } catch (e) {
      debugPrint("‚ùå AuthViewModel: Erro geral no processo de login: $e");
      final errorMsg = _getErrorMessage(e);
      state = AuthState.error(message: errorMsg);
    }
  }

  /// Registra um novo usu√°rio
  Future<void> signUp(String email, String password, String name) async {
    try {
      state = const AuthState.loading();
      
      // Valida√ß√µes de dados
      if (!_isValidEmail(email)) {
        state = const AuthState.error(message: "Por favor, insira um email v√°lido");
        return;
      }
      
      if (password.length < 6) {
        state = const AuthState.error(message: "A senha deve ter pelo menos 6 caracteres");
        return;
      }
      
      if (name.isEmpty) {
        state = const AuthState.error(message: "Por favor, insira seu nome");
        return;
      }
      
      // Verificar se o email j√° est√° registrado antes de tentar o cadastro
      final emailExists = await isEmailRegistered(email);
      if (emailExists) {
        state = const AuthState.error(message: "Este email j√° est√° cadastrado. Por favor, fa√ßa login.");
        return;
      }
      
      final user = await _repository.signUp(email, password, name);
      
      // Verificar se h√° uma sess√£o ativa (email j√° verificado ou verifica√ß√£o desabilitada)
      final session = _repository.getCurrentSession();
      
      if (session != null) {
        // Usu√°rio autenticado automaticamente (verifica√ß√£o de email desabilitada)
        debugPrint("‚úÖ AuthViewModel: Usu√°rio cadastrado e autenticado automaticamente: ${user.email}");
        state = AuthState.authenticated(
          user: AppUser.fromSupabaseUser(user),
        );
      } else {
        // Usu√°rio precisa verificar o email antes de logar
        debugPrint("üîç AuthViewModel: Cadastro realizado, mas verifica√ß√£o de email pendente para: ${user.email}");
        state = AuthState.pendingEmailVerification(
          email: email,
          userId: user.id,
        );
      }
    } catch (e) {
      final errorMsg = _getErrorMessage(e);
      // Melhorar mensagens de erro para o usu√°rio
      if (errorMsg.toLowerCase().contains("already registered") || 
          errorMsg.toLowerCase().contains("j√° est√° cadastrado")) {
        state = const AuthState.error(message: "Este email j√° est√° cadastrado. Por favor, fa√ßa login");
      } else if (errorMsg.toLowerCase().contains("network")) {
        state = const AuthState.error(message: "Erro de conex√£o. Verifique sua internet e tente novamente");
      } else {
        state = AuthState.error(message: errorMsg);
      }
    }
  }

  /// Reenvia o email de verifica√ß√£o para o email fornecido
  Future<void> resendVerificationEmail(String email) async {
    try {
      state = const AuthState.loading();
      
      if (!_isValidEmail(email)) {
        state = const AuthState.error(message: "Por favor, insira um email v√°lido");
        return;
      }
      
      // Obter a URL de redirecionamento baseada na plataforma
      final String redirectUrl = identical(0, 0.0) 
          ? 'https://rayclub.vercel.app/auth/callback'
          : 'rayclub://login-callback/';
      
      debugPrint("üîç AuthViewModel: Reenviando email de verifica√ß√£o para: $email");
      
      // Usar o m√©todo do Supabase para reenviar email de verifica√ß√£o
      await _repository.resendVerificationEmail(email, redirectUrl);
      
      state = AuthState.pendingEmailVerification(
        email: email,
      );
    } catch (e) {
      debugPrint("‚ùå AuthViewModel: Erro ao reenviar email de verifica√ß√£o: $e");
      final errorMsg = _getErrorMessage(e);
      state = AuthState.error(message: errorMsg);
    }
  }

  // Validador simples de formato de email
  bool _isValidEmail(String email) {
    final emailRegExp = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
    return emailRegExp.hasMatch(email);
  }

  /// Realiza logout
  Future<void> signOut() async {
    try {
      state = const AuthState.loading();
      await _repository.signOut();
      state = const AuthState.unauthenticated();
    } catch (e) {
      state = AuthState.error(message: _getErrorMessage(e));
    }
  }

  /// Solicita redefini√ß√£o de senha para o email
  Future<void> resetPassword(String email) async {
    try {
      state = const AuthState.loading();
      await _repository.resetPassword(email);
      state = const AuthState.success(message: 'Email de redefini√ß√£o de senha enviado');
    } catch (e) {
      state = AuthState.error(message: _getErrorMessage(e));
    }
  }

  /// Atualiza o perfil do usu√°rio
  Future<void> updateProfile({
    String? name,
    String? photoUrl,
  }) async {
    try {
      state = const AuthState.loading();
      await _repository.updateProfile(
        name: name,
        photoUrl: photoUrl,
      );

      // Atualiza o estado do usu√°rio atual se autenticado
      state.maybeWhen(
        authenticated: (user) {
          state = AuthState.authenticated(
            user: user.copyWith(
              name: name ?? user.name,
              photoUrl: photoUrl ?? user.photoUrl,
            ),
          );
        },
        orElse: () {},
      );
    } catch (e) {
      state = AuthState.error(message: _getErrorMessage(e));
    }
  }
  
  /// Realiza login com Google
  Future<void> signInWithGoogle() async {
    try {
      state = const AuthState.loading();
      
      debugPrint("üîç AuthViewModel: Iniciando login com Google");
      
      try {
      // Tenta obter a sess√£o usando o m√©todo de signin do reposit√≥rio
      final session = await _repository.signInWithGoogle();
      
      debugPrint("üîç AuthViewModel: Resultado da chamada signInWithGoogle: ${session != null ? 'Sess√£o obtida' : 'Sess√£o n√£o obtida'}");
      
        // Se chegou aqui sem exce√ß√£o, o login foi iniciado corretamente
        // Aguardar um tempo reduzido
        await Future.delayed(const Duration(milliseconds: 500));
      
      // Verifica se foi poss√≠vel obter uma sess√£o v√°lida
      if (session != null) {
        debugPrint("‚úÖ AuthViewModel: Sess√£o obtida com sucesso: ${session.user?.email}");
        
        // Tenta obter o usu√°rio atual
        final user = await _repository.getCurrentUser();
        
        if (user != null) {
          // Login bem-sucedido, usu√°rio autenticado
          debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado: ${user.email}");
          
          // Marcar que o usu√°rio j√° viu a introdu√ß√£o ao logar com sucesso
          await _markIntroAsSeen();
          
          state = AuthState.authenticated(
            user: AppUser.fromSupabaseUser(user),
          );
            return; // Sair da fun√ß√£o, login bem-sucedido
        } else {
            // Tentar novamente com um intervalo curto
          debugPrint("‚ö†Ô∏è AuthViewModel: Sess√£o existe mas usu√°rio n√£o encontrado, tentando novamente...");
            await Future.delayed(const Duration(milliseconds: 500));
          final retryUser = await _repository.getCurrentUser();
          
          if (retryUser != null) {
            debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado na segunda tentativa: ${retryUser.email}");
            
            // Marcar que o usu√°rio j√° viu a introdu√ß√£o ao logar com sucesso
            await _markIntroAsSeen();
            
            state = AuthState.authenticated(
              user: AppUser.fromSupabaseUser(retryUser),
            );
              return; // Sair da fun√ß√£o, login bem-sucedido
            }
          }
        }
        
        // Se chegou aqui sem retornar, houve algum problema no processo de autentica√ß√£o
        debugPrint("‚ö†Ô∏è AuthViewModel: Processo de autentica√ß√£o Google n√£o completado");
        
        // Verificar a sess√£o atual como √∫ltimo recurso
        final currentUser = await _repository.getCurrentUser();
        if (currentUser != null) {
          debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado na verifica√ß√£o final: ${currentUser.email}");
          
          await _markIntroAsSeen();
          
          state = AuthState.authenticated(
            user: AppUser.fromSupabaseUser(currentUser),
          );
          return; // Autentica√ß√£o bem-sucedida
        }
        
        // Se ainda n√£o retornou, n√£o foi poss√≠vel obter uma sess√£o
        debugPrint("‚ùå AuthViewModel: N√£o foi poss√≠vel completar o login com Google");
        state = const AuthState.error(
          message: 'N√£o foi poss√≠vel completar o login. Por favor, tente novamente.',
        );
      } catch (loginError) {
        debugPrint("‚ùå AuthViewModel: Erro espec√≠fico no login com Google: $loginError");
        final errorMsg = _getErrorMessage(loginError);
        
        if (errorMsg.toLowerCase().contains("canceled") || 
            errorMsg.toLowerCase().contains("cancelado")) {
          state = const AuthState.error(message: "Login cancelado pelo usu√°rio");
        } else if (errorMsg.toLowerCase().contains("network") || 
                  errorMsg.toLowerCase().contains("conex√£o")) {
          state = const AuthState.error(message: "Erro de conex√£o. Verifique sua internet e tente novamente");
        } else {
          state = AuthState.error(message: "Erro no login com Google: $errorMsg");
        }
      }
    } catch (e) {
      // Erros gerais durante o processo de login
      debugPrint("‚ùå AuthViewModel: Erro geral durante login com Google: $e");
      final errorMsg = _getErrorMessage(e);
      state = AuthState.error(message: "Falha no login com Google: $errorMsg");
    }
  }

  /// Realiza login com Apple
  Future<void> signInWithApple() async {
    try {
      state = const AuthState.loading();
      
      debugPrint("üîç AuthViewModel: Iniciando login com Apple");
      
      try {
      // Tenta obter a sess√£o usando o m√©todo de signin do reposit√≥rio
      final session = await _repository.signInWithApple();
      
      debugPrint("üîç AuthViewModel: Resultado da chamada signInWithApple: ${session != null ? 'Sess√£o obtida' : 'Sess√£o n√£o obtida'}");
      
        // Aguarda por um curto per√≠odo para garantir que a sess√£o seja processada
        await Future.delayed(const Duration(milliseconds: 500));
      
      // Verifica se foi poss√≠vel obter uma sess√£o v√°lida
      if (session != null) {
        debugPrint("‚úÖ AuthViewModel: Sess√£o obtida com sucesso: ${session.user?.email}");
        
        // Tenta obter o usu√°rio atual
        final user = await _repository.getCurrentUser();
        
        if (user != null) {
          // Login bem-sucedido, usu√°rio autenticado
          debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado: ${user.email}");
          
          // Marcar que o usu√°rio j√° viu a introdu√ß√£o ao logar com sucesso
          await _markIntroAsSeen();
          
          state = AuthState.authenticated(
            user: AppUser.fromSupabaseUser(user),
          );
            return; // Sair da fun√ß√£o, login bem-sucedido
        } else {
            // Tentar novamente com um intervalo curto
          debugPrint("‚ö†Ô∏è AuthViewModel: Sess√£o existe mas usu√°rio n√£o encontrado, tentando novamente...");
            await Future.delayed(const Duration(milliseconds: 500));
          final retryUser = await _repository.getCurrentUser();
          
          if (retryUser != null) {
            debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado na segunda tentativa: ${retryUser.email}");
            
            // Marcar que o usu√°rio j√° viu a introdu√ß√£o ao logar com sucesso
            await _markIntroAsSeen();
            
            state = AuthState.authenticated(
              user: AppUser.fromSupabaseUser(retryUser),
            );
              return; // Sair da fun√ß√£o, login bem-sucedido
            }
          }
        }
        
        // Se chegou aqui sem retornar, houve algum problema no processo de autentica√ß√£o
        debugPrint("‚ö†Ô∏è AuthViewModel: Processo de autentica√ß√£o Apple n√£o completado");
        
        // Verificar a sess√£o atual como √∫ltimo recurso
        final currentUser = await _repository.getCurrentUser();
        if (currentUser != null) {
          debugPrint("‚úÖ AuthViewModel: Usu√°rio encontrado na verifica√ß√£o final: ${currentUser.email}");
          
          await _markIntroAsSeen();
          
          state = AuthState.authenticated(
            user: AppUser.fromSupabaseUser(currentUser),
          );
          return; // Autentica√ß√£o bem-sucedida
        }
        
        // Se ainda n√£o retornou, n√£o foi poss√≠vel obter uma sess√£o
        debugPrint("‚ùå AuthViewModel: N√£o foi poss√≠vel completar o login com Apple");
        state = const AuthState.error(
          message: 'N√£o foi poss√≠vel completar o login. Por favor, tente novamente.',
        );
      } catch (loginError) {
        debugPrint("‚ùå AuthViewModel: Erro espec√≠fico no login com Apple: $loginError");
        final errorMsg = _getErrorMessage(loginError);
        
        if (errorMsg.toLowerCase().contains("canceled") || 
            errorMsg.toLowerCase().contains("cancelado")) {
          state = const AuthState.error(message: "Login cancelado pelo usu√°rio");
        } else if (errorMsg.toLowerCase().contains("network") || 
                  errorMsg.toLowerCase().contains("conex√£o")) {
          state = const AuthState.error(message: "Erro de conex√£o. Verifique sua internet e tente novamente");
        } else {
          state = AuthState.error(message: "Erro no login com Apple: $errorMsg");
        }
      }
    } catch (e) {
      // Erros gerais durante o processo de login
      debugPrint("‚ùå AuthViewModel: Erro geral durante login com Apple: $e");
      final errorMsg = _getErrorMessage(e);
      state = AuthState.error(message: "Falha no login com Apple: $errorMsg");
    }
  }

  /// Verifica se existe uma sess√£o ativa e atualiza o estado
  Future<bool> checkAndUpdateSession() async {
    try {
      // Verifica√ß√£o otimizada para dispositivos mais r√°pidos (iPhone 14)
      final session = _repository.getCurrentSession();
      
      if (session != null) {
        // Log m√≠nimo para reduzir overhead
        debugPrint("‚úÖ Sess√£o ativa: ${session.user.email?.split('@').first ?? 'desconhecido'}");
        
        // Verificar se o user j√° existe no estado atual antes de buscar
        bool hasValidUser = false;
        state.maybeWhen(
          authenticated: (user) => hasValidUser = user.id.isNotEmpty,
          orElse: () => hasValidUser = false,
        );
        
        // Se j√° temos um usu√°rio no estado, n√£o precisamos buscar novamente
        if (hasValidUser) {
          return true;
        }
        
        // Caso contr√°rio, buscar o perfil
        final user = await _repository.getUserProfile();
        if (user != null) {
          state = AuthState.authenticated(
            user: AppUser.fromSupabaseUser(user),
          );
          return true;
        } else {
          // Log reduzido
          debugPrint("‚ùå Falha ao obter perfil para sess√£o ativa");
        }
      }
      return false;
    } catch (e) {
      // Log m√≠nimo para erros
      debugPrint('‚ùå Erro de sess√£o: ${e.toString().split('\n').first}');
      return false;
    }
  }
  
  /// Verifica se a sess√£o atual √© v√°lida e renova se necess√°rio
  /// Se silent for true, n√£o atualiza o estado para loading
  Future<bool> verifyAndRenewSession({bool silent = false}) async {
    try {
      final session = _repository.getCurrentSession();
      if (session == null) {
        if (!silent) state = const AuthState.unauthenticated();
        return false;
      }
      
      // Verificar se o token est√° perto de expirar (menos de 1 hora)
      final expiresAt = session.expiresAt;
      final now = DateTime.now().millisecondsSinceEpoch / 1000;
      final oneHour = 60 * 60;
      
      if (expiresAt != null && (expiresAt - now) < oneHour) {
        debugPrint("üîÑ AuthViewModel: Token pr√≥ximo de expirar, renovando sess√£o");
        // Tentar renovar a sess√£o
        await _repository.refreshSession();
        
        // Verificar se a renova√ß√£o foi bem-sucedida
        final updatedSession = _repository.getCurrentSession();
        if (updatedSession != null) {
          debugPrint("‚úÖ AuthViewModel: Sess√£o renovada com sucesso, expira em: ${updatedSession.expiresAt}");
          
          // Atualizar estado com usu√°rio atual
          final user = await _repository.getCurrentUser();
          if (user != null) {
            state = AuthState.authenticated(
              user: AppUser.fromSupabaseUser(user),
            );
          }
        } else {
          debugPrint("‚ùå AuthViewModel: Falha ao renovar sess√£o");
          if (!silent) state = const AuthState.unauthenticated();
          return false;
        }
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå AuthViewModel: Erro ao verificar/renovar sess√£o: ${e.toString()}');
      if (!silent) state = const AuthState.unauthenticated();
      return false;
    }
  }

  /// Navega para a tela inicial ap√≥s autentica√ß√£o bem-sucedida
  void _navigateToHomeAfterAuth(BuildContext? context) {
    if (context != null) {
      debugPrint('üîÑ AuthViewModel: Navegando para a tela inicial ap√≥s autentica√ß√£o');
      debugPrint('üîÑ Context mounted: ${context.mounted}');
      debugPrint('üîÑ RedirectPath atual: $_redirectPath');
      
      // Usar navega√ß√£o mais segura para evitar conflitos entre navegadores
      WidgetsBinding.instance.addPostFrameCallback((_) {
        // Verificar se o contexto ainda √© v√°lido antes de navegar
        if (context.mounted) {
          try {
            debugPrint('üîÑ AuthViewModel: Executando navega√ß√£o...');
            
            // Verificar se h√° um caminho para redirecionamento
            if (_redirectPath != null && _redirectPath!.isNotEmpty) {
              debugPrint('üîÑ AuthViewModel: Redirecionando para: $_redirectPath');
              // Limpar o caminho de redirecionamento e navegar para ele
              final targetPath = _redirectPath!;
              clearRedirectPath();
              context.router.replaceNamed(targetPath);
            } else {
              debugPrint('üîÑ AuthViewModel: Navegando para home (padr√£o)');
              // Navegar para home (rota inicial do app ap√≥s login)
              context.router.replaceNamed(AppRoutes.home);
            }
            
            debugPrint('‚úÖ AuthViewModel: Navega√ß√£o executada com sucesso');
          } catch (e) {
            debugPrint('‚ùå AuthViewModel: Erro na navega√ß√£o: $e');
            // Fallback: tentar navegar para challenges como segunda op√ß√£o
            try {
              context.router.replaceNamed(AppRoutes.challenges);
              debugPrint('‚úÖ AuthViewModel: Navega√ß√£o fallback para challenges executada');
            } catch (fallbackError) {
              debugPrint('‚ùå AuthViewModel: Erro no fallback de navega√ß√£o: $fallbackError');
            }
          }
        } else {
          debugPrint('‚ùå AuthViewModel: Context desmontado, n√£o √© poss√≠vel navegar');
        }
      });
    } else {
      debugPrint('‚ùå AuthViewModel: Context √© null, n√£o √© poss√≠vel navegar');
    }
  }

  /// M√©todo p√∫blico para navegar para a tela inicial ap√≥s autentica√ß√£o
  void navigateToHomeAfterAuth(BuildContext context) {
    _navigateToHomeAfterAuth(context);
  }
  
  /// M√©todo para diagnosticar problemas de autentica√ß√£o, especialmente em iPads
  Future<Map<String, dynamic>> diagnoseAuthState() async {
    final diagnosticData = <String, dynamic>{};
    try {
      // Verificar estado atual
      diagnosticData['current_state'] = state.runtimeType.toString();
      
      // Verificar sess√£o
      final session = _repository.getCurrentSession();
      diagnosticData['has_session'] = session != null;
      
      if (session != null) {
        diagnosticData['session_expires_at'] = session.expiresAt;
        diagnosticData['user_email'] = session.user.email;
        diagnosticData['user_id'] = session.user.id;
        
        // Testar obten√ß√£o do usu√°rio
        final user = await _repository.getCurrentUser();
        diagnosticData['get_current_user_success'] = user != null;
        
        if (user != null) {
          diagnosticData['user_data'] = {
            'id': user.id,
            'email': user.email,
            'created_at': user.createdAt,
          };
        }
      }
      
      return diagnosticData;
    } catch (e) {
      return {'error': e.toString()};
    }
  }
} 
