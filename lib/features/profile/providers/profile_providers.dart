import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import '../models/profile_model.dart';
import '../repositories/profile_repository.dart';
import '../../auth/repositories/auth_repository.dart';
import '../../auth/viewmodels/auth_view_model.dart';
import '../../../core/providers/providers.dart' as core_providers;

/// Provider que fornece o perfil atual do usu√°rio autenticado
/// ‚úÖ Modificado para for√ßar recarregamento sempre que necess√°rio
final currentProfileProvider = FutureProvider.autoDispose<Profile?>((ref) async {
  debugPrint('üîç currentProfileProvider - Iniciando carregamento...');
  
  final authState = ref.watch(authViewModelProvider);
  
  // Se o usu√°rio n√£o estiver autenticado, retorna null
  final user = authState.maybeWhen(
    authenticated: (user) => user,
    orElse: () => null,
  );
  
  if (user == null) {
    debugPrint('‚ö†Ô∏è currentProfileProvider - Usu√°rio n√£o autenticado');
    return null;
  }
  
  debugPrint('üë§ currentProfileProvider - User ID: ${user.id}');
  
  // Buscar o perfil do usu√°rio do reposit√≥rio
  final profileRepository = ref.watch(core_providers.profileRepositoryProvider);
  
  try {
    final profile = await profileRepository.getProfileById(user.id);
    
    if (profile != null) {
      debugPrint('‚úÖ currentProfileProvider - Perfil carregado:');
      debugPrint('   - Nome: "${profile.name}"');
      debugPrint('   - Email: "${profile.email}"');
      debugPrint('   - Telefone: "${profile.phone}"');
      debugPrint('   - Instagram: "${profile.instagram}"');
      debugPrint('   - G√™nero: "${profile.gender}"');
    } else {
      debugPrint('‚ö†Ô∏è currentProfileProvider - Perfil n√£o encontrado');
    }
    
    return profile;
  } catch (e, stackTrace) {
    debugPrint('‚ùå currentProfileProvider - Erro ao carregar perfil: $e');
    debugPrint('Stack trace: $stackTrace');
    rethrow;
  }
});

/// Provider que disponibiliza a stream de atualiza√ß√µes do perfil atual
final currentProfileStreamProvider = StreamProvider.autoDispose<Profile?>((ref) {
  debugPrint('üîç currentProfileStreamProvider - Iniciando stream...');
  
  final authState = ref.watch(authViewModelProvider);
  
  // Se o usu√°rio n√£o estiver autenticado, retorna stream vazia
  final user = authState.maybeWhen(
    authenticated: (user) => user,
    orElse: () => null,
  );
  
  if (user == null) {
    debugPrint('‚ö†Ô∏è currentProfileStreamProvider - Usu√°rio n√£o autenticado');
    return Stream.value(null);
  }
  
  debugPrint('üë§ currentProfileStreamProvider - User ID: ${user.id}');
  
  // Buscar o perfil do reposit√≥rio como stream
  // Nota: Isso requer implementa√ß√£o de uma stream no reposit√≥rio
  // Por enquanto, vamos simular com uma stream que emite apenas o valor atual
  final profileRepository = ref.watch(core_providers.profileRepositoryProvider);
  
  return Stream.fromFuture(profileRepository.getProfileById(user.id))
      .where((profile) => profile != null)
      .map((profile) {
        if (profile != null) {
          debugPrint('‚úÖ currentProfileStreamProvider - Profile emitido via stream');
        }
        return profile;
      });
});

/// Provider que disponibiliza o nome de exibi√ß√£o do usu√°rio atual
/// ‚úÖ Modificado para recarregar automaticamente
final userDisplayNameProvider = Provider.autoDispose<String>((ref) {
  final profileAsync = ref.watch(currentProfileProvider);
  
  final result = profileAsync.when(
    data: (profile) {
      final name = profile?.name ?? 'Usu√°rio';
      debugPrint('üìã userDisplayNameProvider - Nome: "$name"');
      return name;
    },
    loading: () {
      debugPrint('üîÑ userDisplayNameProvider - Carregando...');
      return 'Carregando...';
    },
    error: (error, _) {
      debugPrint('‚ùå userDisplayNameProvider - Erro: $error');
      return 'Usu√°rio';
    },
  );
  
  return result;
});

/// Provider que disponibiliza a URL da foto do usu√°rio atual
/// ‚úÖ Modificado para recarregar automaticamente
final userPhotoUrlProvider = Provider.autoDispose<String?>((ref) {
  final profileAsync = ref.watch(currentProfileProvider);
  
  final result = profileAsync.when(
    data: (profile) {
      final photoUrl = profile?.photoUrl;
      debugPrint('üìã userPhotoUrlProvider - Photo URL: "$photoUrl"');
      return photoUrl;
    },
    loading: () {
      debugPrint('üîÑ userPhotoUrlProvider - Carregando...');
      return null;
    },
    error: (error, _) {
      debugPrint('‚ùå userPhotoUrlProvider - Erro: $error');
      return null;
    },
  );
  
  return result;
});

/// Provider para for√ßar refresh do perfil
/// ‚úÖ Novo provider para for√ßar recarregamento
final profileRefreshProvider = StateProvider<int>((ref) => 0);

/// Provider que for√ßa refresh do currentProfileProvider
final currentProfileRefreshableProvider = FutureProvider.autoDispose<Profile?>((ref) async {
  // Escutar mudan√ßas no refresh provider
  ref.watch(profileRefreshProvider);
  
  debugPrint('üîÑ currentProfileRefreshableProvider - For√ßando refresh...');
  
  // Usar o mesmo logic do currentProfileProvider mas sempre recarregando
  final authState = ref.read(authViewModelProvider);
  
  final user = authState.maybeWhen(
    authenticated: (user) => user,
    orElse: () => null,
  );
  
  if (user == null) {
    debugPrint('‚ö†Ô∏è currentProfileRefreshableProvider - Usu√°rio n√£o autenticado');
    return null;
  }
  
  final profileRepository = ref.read(core_providers.profileRepositoryProvider);
  
  try {
    // Sempre buscar dados frescos do banco
    final profile = await profileRepository.getCurrentUserProfile();
    
    if (profile != null) {
      debugPrint('‚úÖ currentProfileRefreshableProvider - Perfil refresh carregado:');
      debugPrint('   - Nome: "${profile.name}"');
      debugPrint('   - Telefone: "${profile.phone}"');
      debugPrint('   - Instagram: "${profile.instagram}"');
      debugPrint('   - G√™nero: "${profile.gender}"');
    }
    
    return profile;
  } catch (e) {
    debugPrint('‚ùå currentProfileRefreshableProvider - Erro: $e');
    rethrow;
  }
});

/// M√©todo utilit√°rio para for√ßar refresh do perfil
void forceProfileRefresh(WidgetRef ref) {
  debugPrint('üîÑ For√ßando refresh completo do perfil...');
  
  // Incrementar contador de refresh
  ref.read(profileRefreshProvider.notifier).state++;
  
  // Invalidar todos os providers relacionados
  ref.invalidate(currentProfileProvider);
  ref.invalidate(currentProfileStreamProvider);
  ref.invalidate(userDisplayNameProvider);
  ref.invalidate(userPhotoUrlProvider);
  
  debugPrint('‚úÖ Refresh do perfil executado');
} 