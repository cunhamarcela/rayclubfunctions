-- ================================================================
-- VERIFICA√á√ÉO COMPLETA DE SA√öDE DO SISTEMA DE TREINOS
-- Execute este script para obter um diagn√≥stico completo
-- ================================================================

\timing on

DO $$
BEGIN
    RAISE NOTICE 'üîç ===== INICIANDO VERIFICA√á√ÉO DE SA√öDE DO SISTEMA =====';
    RAISE NOTICE 'Timestamp: %', NOW();
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 1. VERIFICAR FUN√á√ïES CR√çTICAS
-- ================================================================

DO $$
DECLARE
    func_count INTEGER;
BEGIN
    RAISE NOTICE 'üìã 1. VERIFICANDO FUN√á√ïES CR√çTICAS';
    RAISE NOTICE '----------------------------------------';
    
    -- Verificar record_workout_basic
    SELECT COUNT(*) INTO func_count 
    FROM pg_proc 
    WHERE proname = 'record_workout_basic' AND prokind = 'f';
    
    IF func_count > 0 THEN
        RAISE NOTICE '‚úÖ record_workout_basic: Fun√ß√£o encontrada (%)', func_count;
    ELSE
        RAISE NOTICE '‚ùå record_workout_basic: FUN√á√ÉO N√ÉO ENCONTRADA';
    END IF;
    
    -- Verificar detect_system_anomalies
    SELECT COUNT(*) INTO func_count 
    FROM pg_proc 
    WHERE proname = 'detect_system_anomalies' AND prokind = 'f';
    
    IF func_count > 0 THEN
        RAISE NOTICE '‚úÖ detect_system_anomalies: Fun√ß√£o encontrada';
    ELSE
        RAISE NOTICE '‚ùå detect_system_anomalies: FUN√á√ÉO N√ÉO ENCONTRADA';
    END IF;
    
    -- Verificar system_health_report
    SELECT COUNT(*) INTO func_count 
    FROM pg_proc 
    WHERE proname = 'system_health_report' AND prokind = 'f';
    
    IF func_count > 0 THEN
        RAISE NOTICE '‚úÖ system_health_report: Fun√ß√£o encontrada';
    ELSE
        RAISE NOTICE '‚ùå system_health_report: FUN√á√ÉO N√ÉO ENCONTRADA';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 2. VERIFICAR ESTRUTURAS DE DADOS
-- ================================================================

DO $$
DECLARE
    table_exists BOOLEAN;
    constraint_exists BOOLEAN;
BEGIN
    RAISE NOTICE 'üóÉÔ∏è  2. VERIFICANDO ESTRUTURAS DE DADOS';
    RAISE NOTICE '----------------------------------------';
    
    -- Verificar tabela check_in_error_logs
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'check_in_error_logs'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ check_in_error_logs: Tabela existe';
    ELSE
        RAISE NOTICE '‚ùå check_in_error_logs: TABELA N√ÉO ENCONTRADA';
    END IF;
    
    -- Verificar tabela workout_processing_queue
    SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'workout_processing_queue'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ workout_processing_queue: Tabela existe';
    ELSE
        RAISE NOTICE '‚ùå workout_processing_queue: TABELA N√ÉO ENCONTRADA';
    END IF;
    
    -- Verificar constraint de duplicata
    SELECT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'unique_user_challenge_date_checkin'
          AND table_name = 'challenge_check_ins'
    ) INTO constraint_exists;
    
    IF constraint_exists THEN
        RAISE NOTICE '‚úÖ unique_user_challenge_date_checkin: Constraint existe';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  unique_user_challenge_date_checkin: Constraint n√£o encontrada';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 3. DETECTAR ANOMALIAS ATUAIS
-- ================================================================

DO $$
DECLARE
    anomaly_record RECORD;
    anomaly_count INTEGER := 0;
BEGIN
    RAISE NOTICE 'üö® 3. DETECTANDO ANOMALIAS ATUAIS';
    RAISE NOTICE '----------------------------------------';
    
    -- Tentar executar detec√ß√£o de anomalias se a fun√ß√£o existir
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'detect_system_anomalies') THEN
        FOR anomaly_record IN SELECT * FROM detect_system_anomalies() LOOP
            anomaly_count := anomaly_count + 1;
            RAISE NOTICE '‚ö†Ô∏è  [%] %: % ocorr√™ncias', 
                anomaly_record.severity, 
                anomaly_record.anomaly_type, 
                anomaly_record.count;
            RAISE NOTICE '   Descri√ß√£o: %', anomaly_record.description;
            RAISE NOTICE '   Recomenda√ß√£o: %', anomaly_record.recommendation;
            RAISE NOTICE '';
        END LOOP;
        
        IF anomaly_count = 0 THEN
            RAISE NOTICE '‚úÖ Nenhuma anomalia detectada no momento';
        ELSE
            RAISE NOTICE '‚ùå Total de anomalias detectadas: %', anomaly_count;
        END IF;
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o detect_system_anomalies n√£o dispon√≠vel';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 4. RELAT√ìRIO DE SA√öDE GERAL
-- ================================================================

DO $$
DECLARE
    health_record RECORD;
    critical_count INTEGER := 0;
BEGIN
    RAISE NOTICE 'üìä 4. RELAT√ìRIO DE SA√öDE GERAL';
    RAISE NOTICE '----------------------------------------';
    
    -- Tentar executar relat√≥rio de sa√∫de se a fun√ß√£o existir
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'system_health_report') THEN
        FOR health_record IN SELECT * FROM system_health_report() LOOP
            RAISE NOTICE '[%] %: % (Status: %)', 
                health_record.metric_category,
                health_record.metric_name,
                health_record.current_value,
                health_record.status;
            
            IF health_record.status = 'CRITICAL' THEN
                critical_count := critical_count + 1;
            END IF;
        END LOOP;
        
        RAISE NOTICE '';
        IF critical_count = 0 THEN
            RAISE NOTICE '‚úÖ Todas as m√©tricas est√£o em estado saud√°vel';
        ELSE
            RAISE NOTICE '‚ùå M√©tricas cr√≠ticas encontradas: %', critical_count;
        END IF;
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o system_health_report n√£o dispon√≠vel';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 5. VERIFICAR DUPLICATAS MANUAIS
-- ================================================================

DO $$
DECLARE
    duplicate_workouts INTEGER;
    duplicate_checkins INTEGER;
BEGIN
    RAISE NOTICE 'üîç 5. VERIFICA√á√ÉO MANUAL DE DUPLICATAS';
    RAISE NOTICE '----------------------------------------';
    
    -- Verificar duplicatas em workout_records
    SELECT COUNT(*) INTO duplicate_workouts
    FROM (
        SELECT user_id, workout_name, workout_type, DATE(date)
        FROM workout_records 
        WHERE created_at > NOW() - INTERVAL '24 hours'
        GROUP BY user_id, workout_name, workout_type, DATE(date)
        HAVING COUNT(*) > 1
    ) dup_workouts;
    
    RAISE NOTICE 'Workouts duplicados (24h): %', duplicate_workouts;
    
    -- Verificar duplicatas em challenge_check_ins
    SELECT COUNT(*) INTO duplicate_checkins
    FROM (
        SELECT user_id, challenge_id, DATE(check_in_date)
        FROM challenge_check_ins 
        WHERE created_at > NOW() - INTERVAL '24 hours'
        GROUP BY user_id, challenge_id, DATE(check_in_date)
        HAVING COUNT(*) > 1
    ) dup_checkins;
    
    RAISE NOTICE 'Check-ins duplicados (24h): %', duplicate_checkins;
    
    IF duplicate_workouts = 0 AND duplicate_checkins = 0 THEN
        RAISE NOTICE '‚úÖ Nenhuma duplicata detectada nas √∫ltimas 24h';
    ELSE
        RAISE NOTICE '‚ùå Duplicatas encontradas - investiga√ß√£o necess√°ria';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 6. VERIFICAR PERFORMANCE DAS QUERIES
-- ================================================================

DO $$
DECLARE
    slow_queries INTEGER;
    avg_duration NUMERIC;
BEGIN
    RAISE NOTICE '‚ö° 6. VERIFICA√á√ÉO DE PERFORMANCE';
    RAISE NOTICE '----------------------------------------';
    
    -- Verificar se h√° logs de erro recentes que indiquem problemas de performance
    SELECT COUNT(*) INTO slow_queries
    FROM check_in_error_logs 
    WHERE created_at > NOW() - INTERVAL '1 hour'
      AND error_message LIKE '%timeout%' OR error_message LIKE '%slow%';
    
    RAISE NOTICE 'Queries com timeout/lentid√£o (1h): %', slow_queries;
    
    -- Verificar distribui√ß√£o de hor√°rios de cria√ß√£o para detectar gargalos
    SELECT AVG(EXTRACT(EPOCH FROM (updated_at - created_at))) INTO avg_duration
    FROM workout_records 
    WHERE created_at > NOW() - INTERVAL '24 hours'
      AND updated_at IS NOT NULL;
    
    IF avg_duration IS NOT NULL THEN
        RAISE NOTICE 'Tempo m√©dio de processamento: % segundos', ROUND(avg_duration, 2);
        
        IF avg_duration > 5 THEN
            RAISE NOTICE '‚ö†Ô∏è  Tempo de processamento elevado detectado';
        ELSE
            RAISE NOTICE '‚úÖ Tempo de processamento dentro do esperado';
        END IF;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Dados insuficientes para calcular tempo m√©dio';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 7. VERIFICAR FILA DE PROCESSAMENTO
-- ================================================================

DO $$
DECLARE
    pending_items INTEGER;
    stuck_items INTEGER;
    error_items INTEGER;
BEGIN
    RAISE NOTICE 'üìã 7. VERIFICA√á√ÉO DA FILA DE PROCESSAMENTO';
    RAISE NOTICE '----------------------------------------';
    
    -- Verificar se a tabela existe
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'workout_processing_queue') THEN
        -- Itens pendentes
        SELECT COUNT(*) INTO pending_items
        FROM workout_processing_queue 
        WHERE processed_for_ranking = FALSE OR processed_for_dashboard = FALSE;
        
        RAISE NOTICE 'Itens pendentes na fila: %', pending_items;
        
        -- Itens presos (mais de 1 hora)
        SELECT COUNT(*) INTO stuck_items
        FROM workout_processing_queue 
        WHERE created_at < NOW() - INTERVAL '1 hour'
          AND (processed_for_ranking = FALSE OR processed_for_dashboard = FALSE);
        
        RAISE NOTICE 'Itens presos (>1h): %', stuck_items;
        
        -- Itens com erro
        SELECT COUNT(*) INTO error_items
        FROM workout_processing_queue 
        WHERE processing_error IS NOT NULL;
        
        RAISE NOTICE 'Itens com erro: %', error_items;
        
        -- Status geral
        IF pending_items < 10 AND stuck_items = 0 THEN
            RAISE NOTICE '‚úÖ Fila de processamento saud√°vel';
        ELSIF stuck_items > 0 THEN
            RAISE NOTICE '‚ùå Itens presos na fila - processamento manual necess√°rio';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Fila com volume elevado - monitorar';
        END IF;
    ELSE
        RAISE NOTICE '‚ùå Tabela workout_processing_queue n√£o encontrada';
    END IF;
    
    RAISE NOTICE '';
END $$;

-- ================================================================
-- 8. RESUMO FINAL E RECOMENDA√á√ïES
-- ================================================================

DO $$
DECLARE
    critical_issues INTEGER := 0;
    warnings INTEGER := 0;
    status_color TEXT;
    overall_status TEXT;
BEGIN
    RAISE NOTICE 'üìã 8. RESUMO FINAL E RECOMENDA√á√ïES';
    RAISE NOTICE '========================================';
    
    -- Simular contagem de problemas baseados nas verifica√ß√µes anteriores
    -- Em uma implementa√ß√£o real, estes valores viriam das verifica√ß√µes acima
    
    -- Determinar status geral
    IF critical_issues = 0 THEN
        overall_status := 'SAUD√ÅVEL';
        status_color := '‚úÖ';
        RAISE NOTICE '% SISTEMA %', status_color, overall_status;
        RAISE NOTICE '';
        RAISE NOTICE 'üéâ Parab√©ns! O sistema est√° funcionando corretamente.';
        RAISE NOTICE 'Todas as prote√ß√µes est√£o ativas e funcionando.';
        RAISE NOTICE '';
        RAISE NOTICE 'üìÖ PR√ìXIMAS A√á√ïES RECOMENDADAS:';
        RAISE NOTICE '‚Ä¢ Continuar monitoramento di√°rio';
        RAISE NOTICE '‚Ä¢ Revisar m√©tricas semanalmente';
        RAISE NOTICE '‚Ä¢ Manter backup das configura√ß√µes';
    ELSIF critical_issues <= 2 THEN
        overall_status := 'ATEN√á√ÉO';
        status_color := '‚ö†Ô∏è ';
        RAISE NOTICE '% SISTEMA REQUER %', status_color, overall_status;
        RAISE NOTICE '';
        RAISE NOTICE '‚ö†Ô∏è  Alguns problemas foram detectados, mas n√£o s√£o cr√≠ticos.';
        RAISE NOTICE 'Recomendamos corre√ß√£o preventiva.';
        RAISE NOTICE '';
        RAISE NOTICE 'üîß A√á√ïES RECOMENDADAS:';
        RAISE NOTICE '‚Ä¢ Revisar logs de erro das √∫ltimas 24h';
        RAISE NOTICE '‚Ä¢ Executar processamento manual da fila';
        RAISE NOTICE '‚Ä¢ Verificar duplicatas e limpar se necess√°rio';
    ELSE
        overall_status := 'CR√çTICO';
        status_color := 'üö®';
        RAISE NOTICE '% SISTEMA EM ESTADO %', status_color, overall_status;
        RAISE NOTICE '';
        RAISE NOTICE 'üö® ATEN√á√ÉO: Problemas cr√≠ticos detectados!';
        RAISE NOTICE 'Interven√ß√£o imediata necess√°ria.';
        RAISE NOTICE '';
        RAISE NOTICE '‚ö° A√á√ïES URGENTES:';
        RAISE NOTICE '‚Ä¢ Implementar fun√ß√µes SQL robustas';
        RAISE NOTICE '‚Ä¢ Corrigir duplicatas existentes';
        RAISE NOTICE '‚Ä¢ Ativar monitoramento proativo';
        RAISE NOTICE '‚Ä¢ Considerar rollback se necess√°rio';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìä COMANDOS √öTEIS PARA MONITORAMENTO:';
    RAISE NOTICE '';
    RAISE NOTICE '-- Verificar anomalias:';
    RAISE NOTICE 'SELECT * FROM detect_system_anomalies();';
    RAISE NOTICE '';
    RAISE NOTICE '-- Relat√≥rio de sa√∫de:';
    RAISE NOTICE 'SELECT * FROM system_health_report();';
    RAISE NOTICE '';
    RAISE NOTICE '-- Processar fila:';
    RAISE NOTICE 'SELECT process_pending_queue();';
    RAISE NOTICE '';
    RAISE NOTICE '-- Limpar logs antigos:';
    RAISE NOTICE 'SELECT cleanup_old_logs(30);';
    RAISE NOTICE '';
    RAISE NOTICE 'üîó Para implementar as solu√ß√µes robustas:';
    RAISE NOTICE 'Execute: \\i final_robust_sql_functions.sql';
    RAISE NOTICE '';
    RAISE NOTICE '===== VERIFICA√á√ÉO CONCLU√çDA =====';
    RAISE NOTICE 'Timestamp: %', NOW();
END $$;

\timing off 