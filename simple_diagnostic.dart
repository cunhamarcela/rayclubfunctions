import 'dart:io';

void main() async {
  print('üçé DIAGN√ìSTICO COMPLETO - SIGN IN WITH APPLE');
  print('=' * 60);
  print('‚ö†Ô∏è  Nota: Sign in with Apple s√≥ funciona em dispositivos f√≠sicos');
  print('=' * 60);
  
  await _checkFiles();
  await _checkIOSConfig();
  await _checkEnvFile();
  _showNextSteps();
}

Future<void> _checkFiles() async {
  print('\nüìÇ 1. VERIFICANDO ARQUIVOS ESSENCIAIS');
  print('-' * 40);
  
  final files = {
    'pubspec.yaml': 'Configura√ß√£o do projeto',
    'ios/Runner/Info.plist': 'Configura√ß√£o iOS',
    'ios/Runner/Runner.entitlements': 'Entitlements do iOS',
    '.env': 'Vari√°veis de ambiente',
    'lib/features/auth/repositories/auth_repository.dart': 'Repository de autentica√ß√£o',
    'lib/features/auth/viewmodels/auth_viewmodel.dart': 'ViewModel de autentica√ß√£o',
  };
  
  for (final entry in files.entries) {
    final file = File(entry.key);
    if (await file.exists()) {
      print('‚úÖ ${entry.key}: ${entry.value}');
    } else {
      print('‚ùå ${entry.key}: ARQUIVO N√ÉO ENCONTRADO');
    }
  }
}

Future<void> _checkIOSConfig() async {
  print('\nüì± 2. VERIFICANDO CONFIGURA√á√ÉO iOS');
  print('-' * 40);
  
  // Verificar Info.plist
  final infoPlist = File('ios/Runner/Info.plist');
  if (await infoPlist.exists()) {
    final content = await infoPlist.readAsString();
    print('‚úÖ Info.plist encontrado');
    
    if (content.contains('rayclub') && content.contains('CFBundleURLSchemes')) {
      print('  ‚úÖ URL Scheme "rayclub" configurado');
    } else {
      print('  ‚ùå URL Scheme "rayclub" N√ÉO encontrado');
    }
    
    if (content.contains('com.apple.developer.associated-domains')) {
      print('  ‚úÖ Associated Domains configurado');
    } else {
      print('  ‚ö†Ô∏è  Associated Domains n√£o encontrado (opcional)');
    }
  }
  
  // Verificar Runner.entitlements
  final entitlements = File('ios/Runner/Runner.entitlements');
  if (await entitlements.exists()) {
    final content = await entitlements.readAsString();
    print('‚úÖ Runner.entitlements encontrado');
    
    if (content.contains('com.apple.developer.applesignin')) {
      print('  ‚úÖ Sign in with Apple entitlement configurado');
    } else {
      print('  ‚ùå Sign in with Apple entitlement N√ÉO encontrado');
    }
  }
  
  // Verificar pubspec.yaml
  final pubspec = File('pubspec.yaml');
  if (await pubspec.exists()) {
    final content = await pubspec.readAsString();
    print('‚úÖ pubspec.yaml encontrado');
    
    if (content.contains('sign_in_with_apple')) {
      print('  ‚úÖ Depend√™ncia sign_in_with_apple configurada');
    } else {
      print('  ‚ùå Depend√™ncia sign_in_with_apple N√ÉO encontrada');
    }
  }
}

Future<void> _checkEnvFile() async {
  print('\nüîê 3. VERIFICANDO VARI√ÅVEIS DE AMBIENTE');
  print('-' * 40);
  
  final envFile = File('.env');
  if (await envFile.exists()) {
    final content = await envFile.readAsString();
    print('‚úÖ Arquivo .env encontrado');
    
    final hasSupabaseUrl = content.contains('SUPABASE_URL=');
    final hasSupabaseKey = content.contains('SUPABASE_ANON_KEY=');
    final hasAppleClientId = content.contains('APPLE_CLIENT_ID=');
    
    print('  ${hasSupabaseUrl ? "‚úÖ" : "‚ùå"} SUPABASE_URL');
    print('  ${hasSupabaseKey ? "‚úÖ" : "‚ùå"} SUPABASE_ANON_KEY');
    print('  ${hasAppleClientId ? "‚úÖ" : "‚ö†Ô∏è "} APPLE_CLIENT_ID (opcional)');
    
    if (hasSupabaseUrl) {
      final urlMatch = RegExp(r'SUPABASE_URL=(.+)').firstMatch(content);
      if (urlMatch != null) {
        final url = urlMatch.group(1)?.trim() ?? '';
        print('  üìç URL: ${url.substring(0, url.length > 30 ? 30 : url.length)}...');
      }
    }
  } else {
    print('‚ùå Arquivo .env N√ÉO encontrado');
  }
}

void _showNextSteps() {
  print('\nüîç 4. PR√ìXIMOS PASSOS PARA TESTE');
  print('=' * 60);
  
  print('\n1Ô∏è‚É£ CONECTE UM DISPOSITIVO F√çSICO iOS');
  print('   - iPhone ou iPad com iOS 13+');
  print('   - Cable USB conectado ao Mac');
  print('   - Dispositivo desbloqueado e confi√°vel');
  
  print('\n2Ô∏è‚É£ COMPILE PARA O DISPOSITIVO:');
  print('   flutter devices  # lista dispositivos');
  print('   flutter run --device-id [device-id]');
  
  print('\n3Ô∏è‚É£ VERIFICA√á√ïES NO APPLE DEVELOPER:');
  print('   ‚úÖ App ID: com.rayclub.app');
  print('   ‚úÖ Service ID: com.rayclub.auth');
  print('   ‚úÖ Key ID: A9CM2RXUWB');
  print('   ‚úÖ Team ID: [verificar se est√° correto]');
  print('   ‚úÖ Private Key (.p8): [arquivo baixado]');
  
  print('\n4Ô∏è‚É£ VERIFICA√á√ïES NO SUPABASE:');
  print('   ‚úÖ Authentication > Providers > Apple > Enabled');
  print('   ‚úÖ Client ID: com.rayclub.auth');
  print('   ‚úÖ Team ID: A9CM2RXUWB');
  print('   ‚úÖ Key ID: [sua key]');
  print('   ‚úÖ Private Key: [conte√∫do do .p8]');
  
  print('\n5Ô∏è‚É£ TESTE NO DISPOSITIVO:');
  print('   - Toque no bot√£o "Sign in with Apple"');
  print('   - Deve abrir interface nativa do iOS');
  print('   - Complete o login/senha');
  print('   - Verifique se retorna para o app');
  
  print('\nüêõ SE DER ERRO:');
  print('   - Use Xcode para ver logs detalhados');
  print('   - Window > Devices and Simulators');
  print('   - Selecione seu device > Open Console');
  print('   - Filtre por "rayclub" ou "supabase"');
  
  print('\nüìã CONFIGURA√á√ÉO SUPABASE REQUERIDA:');
  print('   Redirect URLs:');
  print('   - https://[seu-supabase-url]/auth/v1/callback');
  print('   - https://rayclub.com.br/auth/callback');
  
  print('\n‚úÖ Diagn√≥stico finalizado!');
  print('üìû Se o erro persistir, execute no dispositivo e');
  print('   capture os logs para an√°lise detalhada.');
} 