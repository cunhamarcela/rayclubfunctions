// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/benefits/benefit_expiration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:ray_club_app/features/benefits/enums/benefit_type.dart' as _i7;
import 'package:ray_club_app/features/benefits/models/benefit.dart' as _i6;
import 'package:ray_club_app/features/benefits/models/redeemed_benefit_model.dart'
    as _i2;
import 'package:ray_club_app/features/benefits/repositories/benefit_repository.dart'
    as _i4;
import 'package:ray_club_app/services/qr_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRedeemedBenefit_0 extends _i1.SmartFake
    implements _i2.RedeemedBenefit {
  _FakeRedeemedBenefit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQRCodeResult_1 extends _i1.SmartFake implements _i3.QRCodeResult {
  _FakeQRCodeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BenefitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBenefitRepository extends _i1.Mock implements _i4.BenefitRepository {
  MockBenefitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Benefit>> getBenefits() => (super.noSuchMethod(
        Invocation.method(
          #getBenefits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Benefit>>.value(<_i6.Benefit>[]),
      ) as _i5.Future<List<_i6.Benefit>>);

  @override
  _i5.Future<_i6.Benefit?> getBenefitById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getBenefitById,
          [id],
        ),
        returnValue: _i5.Future<_i6.Benefit?>.value(),
      ) as _i5.Future<_i6.Benefit?>);

  @override
  _i5.Future<List<String>> getBenefitCategories() => (super.noSuchMethod(
        Invocation.method(
          #getBenefitCategories,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i6.Benefit>> getBenefitsByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBenefitsByCategory,
          [category],
        ),
        returnValue: _i5.Future<List<_i6.Benefit>>.value(<_i6.Benefit>[]),
      ) as _i5.Future<List<_i6.Benefit>>);

  @override
  _i5.Future<bool> hasEnoughPoints(String? benefitId) => (super.noSuchMethod(
        Invocation.method(
          #hasEnoughPoints,
          [benefitId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.RedeemedBenefit> redeemBenefit(String? benefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #redeemBenefit,
          [benefitId],
        ),
        returnValue:
            _i5.Future<_i2.RedeemedBenefit>.value(_FakeRedeemedBenefit_0(
          this,
          Invocation.method(
            #redeemBenefit,
            [benefitId],
          ),
        )),
      ) as _i5.Future<_i2.RedeemedBenefit>);

  @override
  _i5.Future<List<_i2.RedeemedBenefit>> getRedeemedBenefits() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRedeemedBenefits,
          [],
        ),
        returnValue: _i5.Future<List<_i2.RedeemedBenefit>>.value(
            <_i2.RedeemedBenefit>[]),
      ) as _i5.Future<List<_i2.RedeemedBenefit>>);

  @override
  _i5.Future<_i2.RedeemedBenefit?> getRedeemedBenefitById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRedeemedBenefitById,
          [id],
        ),
        returnValue: _i5.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i5.Future<_i2.RedeemedBenefit?>);

  @override
  _i5.Future<_i2.RedeemedBenefit> markBenefitAsUsed(
          String? redeemedBenefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markBenefitAsUsed,
          [redeemedBenefitId],
        ),
        returnValue:
            _i5.Future<_i2.RedeemedBenefit>.value(_FakeRedeemedBenefit_0(
          this,
          Invocation.method(
            #markBenefitAsUsed,
            [redeemedBenefitId],
          ),
        )),
      ) as _i5.Future<_i2.RedeemedBenefit>);

  @override
  _i5.Future<void> cancelRedeemedBenefit(String? redeemedBenefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelRedeemedBenefit,
          [redeemedBenefitId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.RedeemedBenefit?> useBenefit(String? redeemedBenefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #useBenefit,
          [redeemedBenefitId],
        ),
        returnValue: _i5.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i5.Future<_i2.RedeemedBenefit?>);

  @override
  _i5.Future<_i2.RedeemedBenefit?> updateBenefitStatus(
    String? redeemedBenefitId,
    _i7.BenefitStatus? newStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBenefitStatus,
          [
            redeemedBenefitId,
            newStatus,
          ],
        ),
        returnValue: _i5.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i5.Future<_i2.RedeemedBenefit?>);

  @override
  _i5.Future<bool> isAdmin() => (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.RedeemedBenefit>> getAllRedeemedBenefits() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRedeemedBenefits,
          [],
        ),
        returnValue: _i5.Future<List<_i2.RedeemedBenefit>>.value(
            <_i2.RedeemedBenefit>[]),
      ) as _i5.Future<List<_i2.RedeemedBenefit>>);

  @override
  _i5.Future<_i6.Benefit?> updateBenefitExpiration(
    String? benefitId,
    DateTime? newExpirationDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBenefitExpiration,
          [
            benefitId,
            newExpirationDate,
          ],
        ),
        returnValue: _i5.Future<_i6.Benefit?>.value(),
      ) as _i5.Future<_i6.Benefit?>);

  @override
  _i5.Future<_i2.RedeemedBenefit?> extendRedeemedBenefitExpiration(
    String? redeemedBenefitId,
    DateTime? newExpirationDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #extendRedeemedBenefitExpiration,
          [
            redeemedBenefitId,
            newExpirationDate,
          ],
        ),
        returnValue: _i5.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i5.Future<_i2.RedeemedBenefit?>);

  @override
  _i5.Future<List<_i6.Benefit>> getFeaturedBenefits() => (super.noSuchMethod(
        Invocation.method(
          #getFeaturedBenefits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Benefit>>.value(<_i6.Benefit>[]),
      ) as _i5.Future<List<_i6.Benefit>>);

  @override
  _i5.Future<String> generateRedemptionCode({
    required String? userId,
    required String? benefitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRedemptionCode,
          [],
          {
            #userId: userId,
            #benefitId: benefitId,
          },
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateRedemptionCode,
            [],
            {
              #userId: userId,
              #benefitId: benefitId,
            },
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> verifyRedemptionCode({
    required String? redemptionCode,
    required String? benefitId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyRedemptionCode,
          [],
          {
            #redemptionCode: redemptionCode,
            #benefitId: benefitId,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [QRService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQRService extends _i1.Mock implements _i3.QRService {
  MockQRService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> generateQRCodeData({
    required String? userId,
    required String? benefitId,
    required String? redemptionCode,
    required int? timestamp,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateQRCodeData,
          [],
          {
            #userId: userId,
            #benefitId: benefitId,
            #redemptionCode: redemptionCode,
            #timestamp: timestamp,
          },
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateQRCodeData,
            [],
            {
              #userId: userId,
              #benefitId: benefitId,
              #redemptionCode: redemptionCode,
              #timestamp: timestamp,
            },
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> generateRedeemedBenefitQRCode(
          _i2.RedeemedBenefit? redeemedBenefit) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRedeemedBenefitQRCode,
          [redeemedBenefit],
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateRedeemedBenefitQRCode,
            [redeemedBenefit],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i3.QRCodeResult> generateQRDataForBenefit({
    required String? benefitId,
    required String? code,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateQRDataForBenefit,
          [],
          {
            #benefitId: benefitId,
            #code: code,
          },
        ),
        returnValue: _i5.Future<_i3.QRCodeResult>.value(_FakeQRCodeResult_1(
          this,
          Invocation.method(
            #generateQRDataForBenefit,
            [],
            {
              #benefitId: benefitId,
              #code: code,
            },
          ),
        )),
      ) as _i5.Future<_i3.QRCodeResult>);

  @override
  _i5.Future<bool> verifyQRCodeData(String? qrCodeData) => (super.noSuchMethod(
        Invocation.method(
          #verifyQRCodeData,
          [qrCodeData],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
