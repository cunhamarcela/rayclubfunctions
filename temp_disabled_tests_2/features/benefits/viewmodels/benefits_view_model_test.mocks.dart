// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/benefits/viewmodels/benefits_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/features/benefits/enums/benefit_type.dart' as _i6;
import 'package:ray_club_app/features/benefits/models/benefit.dart' as _i5;
import 'package:ray_club_app/features/benefits/models/redeemed_benefit_model.dart'
    as _i2;
import 'package:ray_club_app/features/benefits/repositories/benefits_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRedeemedBenefit_0 extends _i1.SmartFake
    implements _i2.RedeemedBenefit {
  _FakeRedeemedBenefit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BenefitsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBenefitsRepository extends _i1.Mock
    implements _i3.BenefitsRepository {
  MockBenefitsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Benefit>> getBenefits() => (super.noSuchMethod(
        Invocation.method(
          #getBenefits,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Benefit>>.value(<_i5.Benefit>[]),
      ) as _i4.Future<List<_i5.Benefit>>);

  @override
  _i4.Future<_i5.Benefit?> getBenefitById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getBenefitById,
          [id],
        ),
        returnValue: _i4.Future<_i5.Benefit?>.value(),
      ) as _i4.Future<_i5.Benefit?>);

  @override
  _i4.Future<List<String>> getBenefitCategories() => (super.noSuchMethod(
        Invocation.method(
          #getBenefitCategories,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<_i5.Benefit>> getBenefitsByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBenefitsByCategory,
          [category],
        ),
        returnValue: _i4.Future<List<_i5.Benefit>>.value(<_i5.Benefit>[]),
      ) as _i4.Future<List<_i5.Benefit>>);

  @override
  _i4.Future<bool> hasEnoughPoints(String? benefitId) => (super.noSuchMethod(
        Invocation.method(
          #hasEnoughPoints,
          [benefitId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.RedeemedBenefit> redeemBenefit(String? benefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #redeemBenefit,
          [benefitId],
        ),
        returnValue:
            _i4.Future<_i2.RedeemedBenefit>.value(_FakeRedeemedBenefit_0(
          this,
          Invocation.method(
            #redeemBenefit,
            [benefitId],
          ),
        )),
      ) as _i4.Future<_i2.RedeemedBenefit>);

  @override
  _i4.Future<List<_i2.RedeemedBenefit>> getRedeemedBenefits() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRedeemedBenefits,
          [],
        ),
        returnValue: _i4.Future<List<_i2.RedeemedBenefit>>.value(
            <_i2.RedeemedBenefit>[]),
      ) as _i4.Future<List<_i2.RedeemedBenefit>>);

  @override
  _i4.Future<_i2.RedeemedBenefit?> useBenefit(String? redeemedBenefitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #useBenefit,
          [redeemedBenefitId],
        ),
        returnValue: _i4.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i4.Future<_i2.RedeemedBenefit?>);

  @override
  _i4.Future<_i2.RedeemedBenefit?> updateBenefitStatus(
    String? redeemedBenefitId,
    _i6.BenefitStatus? newStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBenefitStatus,
          [
            redeemedBenefitId,
            newStatus,
          ],
        ),
        returnValue: _i4.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i4.Future<_i2.RedeemedBenefit?>);

  @override
  _i4.Future<bool> isAdmin() => (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.RedeemedBenefit>> getAllRedeemedBenefits() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRedeemedBenefits,
          [],
        ),
        returnValue: _i4.Future<List<_i2.RedeemedBenefit>>.value(
            <_i2.RedeemedBenefit>[]),
      ) as _i4.Future<List<_i2.RedeemedBenefit>>);

  @override
  _i4.Future<_i5.Benefit?> updateBenefitExpiration(
    String? benefitId,
    DateTime? newExpirationDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBenefitExpiration,
          [
            benefitId,
            newExpirationDate,
          ],
        ),
        returnValue: _i4.Future<_i5.Benefit?>.value(),
      ) as _i4.Future<_i5.Benefit?>);

  @override
  _i4.Future<_i2.RedeemedBenefit?> extendRedeemedBenefitExpiration(
    String? redeemedBenefitId,
    DateTime? newExpirationDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #extendRedeemedBenefitExpiration,
          [
            redeemedBenefitId,
            newExpirationDate,
          ],
        ),
        returnValue: _i4.Future<_i2.RedeemedBenefit?>.value(),
      ) as _i4.Future<_i2.RedeemedBenefit?>);
}
