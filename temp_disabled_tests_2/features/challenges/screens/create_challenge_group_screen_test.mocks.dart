// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/challenges/screens/create_challenge_group_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/features/challenges/models/challenge_group.dart'
    as _i5;
import 'package:ray_club_app/features/challenges/viewmodels/challenge_group_view_model.dart'
    as _i2;
import 'package:state_notifier/state_notifier.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChallengeGroupState_0 extends _i1.SmartFake
    implements _i2.ChallengeGroupState {
  _FakeChallengeGroupState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChallengeGroupViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeGroupViewModel extends _i1.Mock
    implements _i2.ChallengeGroupViewModel {
  MockChallengeGroupViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<_i2.ChallengeGroupState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.ChallengeGroupState>.empty(),
      ) as _i4.Stream<_i2.ChallengeGroupState>);

  @override
  _i2.ChallengeGroupState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeChallengeGroupState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ChallengeGroupState);

  @override
  set state(_i2.ChallengeGroupState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ChallengeGroupState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeChallengeGroupState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.ChallengeGroupState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadUserGroups() => (super.noSuchMethod(
        Invocation.method(
          #loadUserGroups,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadPendingInvites(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadPendingInvites,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadGroupDetails(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #loadGroupDetails,
          [groupId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> createGroup({
    required String? name,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [],
          {
            #name: name,
            #description: description,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> updateGroup(_i5.ChallengeGroup? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [groupId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> inviteUserToGroup({
    required String? groupId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #inviteUserToGroup,
          [],
          {
            #groupId: groupId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> respondToInvite(
    String? inviteId,
    bool? accept,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToInvite,
          [
            inviteId,
            accept,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeUserFromGroup(
    String? groupId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserFromGroup,
          [
            groupId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> refreshGroupRanking(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #refreshGroupRanking,
          [groupId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void clearMessages() => super.noSuchMethod(
        Invocation.method(
          #clearMessages,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> joinGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #joinGroup,
          [groupId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> leaveGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #leaveGroup,
          [groupId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  bool updateShouldNotify(
    _i2.ChallengeGroupState? old,
    _i2.ChallengeGroupState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.RemoveListener addListener(
    _i6.Listener<_i2.ChallengeGroupState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
