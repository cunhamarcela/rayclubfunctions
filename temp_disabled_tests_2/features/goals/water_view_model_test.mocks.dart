// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/goals/water_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/features/goals/models/water_intake_model.dart'
    as _i2;
import 'package:ray_club_app/features/goals/repositories/water_intake_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWaterIntake_0 extends _i1.SmartFake implements _i2.WaterIntake {
  _FakeWaterIntake_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaterIntakeStats_1 extends _i1.SmartFake
    implements _i3.WaterIntakeStats {
  _FakeWaterIntakeStats_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseWaterIntakeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseWaterIntakeRepository extends _i1.Mock
    implements _i3.SupabaseWaterIntakeRepository {
  MockSupabaseWaterIntakeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.WaterIntake> getTodayWaterIntake() => (super.noSuchMethod(
        Invocation.method(
          #getTodayWaterIntake,
          [],
        ),
        returnValue: _i4.Future<_i2.WaterIntake>.value(_FakeWaterIntake_0(
          this,
          Invocation.method(
            #getTodayWaterIntake,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WaterIntake>);

  @override
  _i4.Future<_i2.WaterIntake> insertOrUpdateWaterIntake({
    required String? userId,
    required DateTime? date,
    required int? cups,
    required int? goal,
    String? notes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateWaterIntake,
          [],
          {
            #userId: userId,
            #date: date,
            #cups: cups,
            #goal: goal,
            #notes: notes,
          },
        ),
        returnValue: _i4.Future<_i2.WaterIntake>.value(_FakeWaterIntake_0(
          this,
          Invocation.method(
            #insertOrUpdateWaterIntake,
            [],
            {
              #userId: userId,
              #date: date,
              #cups: cups,
              #goal: goal,
              #notes: notes,
            },
          ),
        )),
      ) as _i4.Future<_i2.WaterIntake>);

  @override
  _i4.Future<_i2.WaterIntake> addGlass() => (super.noSuchMethod(
        Invocation.method(
          #addGlass,
          [],
        ),
        returnValue: _i4.Future<_i2.WaterIntake>.value(_FakeWaterIntake_0(
          this,
          Invocation.method(
            #addGlass,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WaterIntake>);

  @override
  _i4.Future<_i2.WaterIntake> removeGlass() => (super.noSuchMethod(
        Invocation.method(
          #removeGlass,
          [],
        ),
        returnValue: _i4.Future<_i2.WaterIntake>.value(_FakeWaterIntake_0(
          this,
          Invocation.method(
            #removeGlass,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WaterIntake>);

  @override
  _i4.Future<_i2.WaterIntake> updateDailyGoal(int? newGoal) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDailyGoal,
          [newGoal],
        ),
        returnValue: _i4.Future<_i2.WaterIntake>.value(_FakeWaterIntake_0(
          this,
          Invocation.method(
            #updateDailyGoal,
            [newGoal],
          ),
        )),
      ) as _i4.Future<_i2.WaterIntake>);

  @override
  _i4.Future<List<_i2.WaterIntake>> getWaterIntakeHistory({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWaterIntakeHistory,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.WaterIntake>>.value(<_i2.WaterIntake>[]),
      ) as _i4.Future<List<_i2.WaterIntake>>);

  @override
  _i4.Future<_i2.WaterIntake?> getWaterIntakeByDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWaterIntakeByDate,
          [date],
        ),
        returnValue: _i4.Future<_i2.WaterIntake?>.value(),
      ) as _i4.Future<_i2.WaterIntake?>);

  @override
  _i4.Future<_i3.WaterIntakeStats> getWaterIntakeStats({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWaterIntakeStats,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i4.Future<_i3.WaterIntakeStats>.value(_FakeWaterIntakeStats_1(
          this,
          Invocation.method(
            #getWaterIntakeStats,
            [],
            {
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i3.WaterIntakeStats>);
}
