// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/settings/advanced_settings_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/core/services/auth_service.dart' as _i7;
import 'package:ray_club_app/features/auth/models/user.dart' as _i3;
import 'package:ray_club_app/features/settings/models/advanced_settings_state.dart'
    as _i2;
import 'package:ray_club_app/features/settings/repositories/advanced_settings_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdvancedSettingsState_0 extends _i1.SmartFake
    implements _i2.AdvancedSettingsState {
  _FakeAdvancedSettingsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppUser_2 extends _i1.SmartFake implements _i3.AppUser {
  _FakeAppUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AdvancedSettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdvancedSettingsRepository extends _i1.Mock
    implements _i4.AdvancedSettingsRepository {
  MockAdvancedSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AdvancedSettingsState> loadSettings(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSettings,
          [userId],
        ),
        returnValue: _i5.Future<_i2.AdvancedSettingsState>.value(
            _FakeAdvancedSettingsState_0(
          this,
          Invocation.method(
            #loadSettings,
            [userId],
          ),
        )),
      ) as _i5.Future<_i2.AdvancedSettingsState>);

  @override
  _i5.Future<void> saveSettings(
    String? userId,
    _i2.AdvancedSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [
            userId,
            settings,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateLanguage(
    String? userId,
    String? languageCode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLanguage,
          [
            userId,
            languageCode,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateThemeMode(
    String? userId,
    _i6.ThemeMode? themeMode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateThemeMode,
          [
            userId,
            themeMode,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updatePrivacySettings(
    String? userId,
    _i2.PrivacySettings? privacySettings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePrivacySettings,
          [
            userId,
            privacySettings,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateNotificationSettings(
    String? userId,
    _i2.NotificationSettings? notificationSettings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotificationSettings,
          [
            userId,
            notificationSettings,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<DateTime> syncSettings(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #syncSettings,
          [userId],
        ),
        returnValue: _i5.Future<DateTime>.value(_FakeDateTime_1(
          this,
          Invocation.method(
            #syncSettings,
            [userId],
          ),
        )),
      ) as _i5.Future<DateTime>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i7.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<_i3.AppUser> signInWithEmailPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<_i3.AppUser>.value(_FakeAppUser_2(
          this,
          Invocation.method(
            #signInWithEmailPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i5.Future<_i3.AppUser>);

  @override
  _i5.Future<_i3.AppUser> signUpWithEmailPassword(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailPassword,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i5.Future<_i3.AppUser>.value(_FakeAppUser_2(
          this,
          Invocation.method(
            #signUpWithEmailPassword,
            [
              email,
              password,
              name,
            ],
          ),
        )),
      ) as _i5.Future<_i3.AppUser>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
