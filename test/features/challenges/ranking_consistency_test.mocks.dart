// Mocks generated by Mockito 5.4.5 from annotations
// in ray_club_app/test/features/challenges/ranking_consistency_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ray_club_app/features/challenges/models/challenge.dart' as _i2;
import 'package:ray_club_app/features/challenges/models/challenge_check_in.dart'
    as _i4;
import 'package:ray_club_app/features/challenges/models/challenge_group.dart'
    as _i3;
import 'package:ray_club_app/features/challenges/models/challenge_progress.dart'
    as _i7;
import 'package:ray_club_app/features/challenges/models/workout_record_with_user.dart'
    as _i8;
import 'package:ray_club_app/features/challenges/repositories/challenge_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChallenge_0 extends _i1.SmartFake implements _i2.Challenge {
  _FakeChallenge_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChallengeGroup_1 extends _i1.SmartFake
    implements _i3.ChallengeGroup {
  _FakeChallengeGroup_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckInResult_2 extends _i1.SmartFake implements _i4.CheckInResult {
  _FakeCheckInResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChallengeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeRepository extends _i1.Mock
    implements _i5.ChallengeRepository {
  MockChallengeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Challenge>> getChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge> getChallengeById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getChallengeById,
          [id],
        ),
        returnValue: _i6.Future<_i2.Challenge>.value(_FakeChallenge_0(
          this,
          Invocation.method(
            #getChallengeById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Challenge>);

  @override
  _i6.Future<List<_i2.Challenge>> getUserChallenges(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserChallenges,
          [],
          {#userId: userId},
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<List<_i2.Challenge>> getActiveChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getActiveChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<List<_i2.Challenge>> getUserActiveChallenges(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserActiveChallenges,
          [userId],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge?> getOfficialChallenge() => (super.noSuchMethod(
        Invocation.method(
          #getOfficialChallenge,
          [],
        ),
        returnValue: _i6.Future<_i2.Challenge?>.value(),
      ) as _i6.Future<_i2.Challenge?>);

  @override
  _i6.Future<List<_i2.Challenge>> getOfficialChallenges() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfficialChallenges,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i6.Future<List<_i2.Challenge>>);

  @override
  _i6.Future<_i2.Challenge?> getMainChallenge() => (super.noSuchMethod(
        Invocation.method(
          #getMainChallenge,
          [],
        ),
        returnValue: _i6.Future<_i2.Challenge?>.value(),
      ) as _i6.Future<_i2.Challenge?>);

  @override
  _i6.Future<_i2.Challenge> createChallenge(_i2.Challenge? challenge) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChallenge,
          [challenge],
        ),
        returnValue: _i6.Future<_i2.Challenge>.value(_FakeChallenge_0(
          this,
          Invocation.method(
            #createChallenge,
            [challenge],
          ),
        )),
      ) as _i6.Future<_i2.Challenge>);

  @override
  _i6.Future<void> updateChallenge(_i2.Challenge? challenge) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChallenge,
          [challenge],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteChallenge(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteChallenge,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> joinChallenge({
    required String? challengeId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChallenge,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> leaveChallenge({
    required String? challengeId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveChallenge,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.ChallengeProgress?> getUserProgress({
    required String? challengeId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProgress,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<_i7.ChallengeProgress?>.value(),
      ) as _i6.Future<_i7.ChallengeProgress?>);

  @override
  _i6.Future<bool> isUserParticipatingInChallenge({
    required String? challengeId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isUserParticipatingInChallenge,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i7.ChallengeProgress>> getChallengeProgress(
          String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeProgress,
          [challengeId],
        ),
        returnValue: _i6.Future<List<_i7.ChallengeProgress>>.value(
            <_i7.ChallengeProgress>[]),
      ) as _i6.Future<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<void> updateUserProgress({
    required String? challengeId,
    required String? userId,
    required String? userName,
    String? userPhotoUrl,
    required int? points,
    required double? completionPercentage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProgress,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
            #userName: userName,
            #userPhotoUrl: userPhotoUrl,
            #points: points,
            #completionPercentage: completionPercentage,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> createUserProgress({
    required String? challengeId,
    required String? userId,
    required String? userName,
    String? userPhotoUrl,
    required int? points,
    required double? completionPercentage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserProgress,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
            #userName: userName,
            #userPhotoUrl: userPhotoUrl,
            #points: points,
            #completionPercentage: completionPercentage,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addPointsToUserProgress({
    required String? challengeId,
    required String? userId,
    required int? pointsToAdd,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPointsToUserProgress,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
            #pointsToAdd: pointsToAdd,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> isCurrentUserAdmin() => (super.noSuchMethod(
        Invocation.method(
          #isCurrentUserAdmin,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> toggleAdminStatus() => (super.noSuchMethod(
        Invocation.method(
          #toggleAdminStatus,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<List<_i7.ChallengeProgress>> watchChallengeParticipants(
    String? challengeId, {
    int? limit = 50,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChallengeParticipants,
          [challengeId],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i6.Stream<List<_i7.ChallengeProgress>>.empty(),
      ) as _i6.Stream<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<_i3.ChallengeGroup> createGroup({
    required String? challengeId,
    required String? creatorId,
    required String? name,
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [],
          {
            #challengeId: challengeId,
            #creatorId: creatorId,
            #name: name,
            #description: description,
          },
        ),
        returnValue: _i6.Future<_i3.ChallengeGroup>.value(_FakeChallengeGroup_1(
          this,
          Invocation.method(
            #createGroup,
            [],
            {
              #challengeId: challengeId,
              #creatorId: creatorId,
              #name: name,
              #description: description,
            },
          ),
        )),
      ) as _i6.Future<_i3.ChallengeGroup>);

  @override
  _i6.Future<_i3.ChallengeGroup> getGroupById(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupById,
          [groupId],
        ),
        returnValue: _i6.Future<_i3.ChallengeGroup>.value(_FakeChallengeGroup_1(
          this,
          Invocation.method(
            #getGroupById,
            [groupId],
          ),
        )),
      ) as _i6.Future<_i3.ChallengeGroup>);

  @override
  _i6.Future<List<_i3.ChallengeGroup>> getUserCreatedGroups(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserCreatedGroups,
          [userId],
        ),
        returnValue:
            _i6.Future<List<_i3.ChallengeGroup>>.value(<_i3.ChallengeGroup>[]),
      ) as _i6.Future<List<_i3.ChallengeGroup>>);

  @override
  _i6.Future<List<_i3.ChallengeGroup>> getUserMemberGroups(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMemberGroups,
          [userId],
        ),
        returnValue:
            _i6.Future<List<_i3.ChallengeGroup>>.value(<_i3.ChallengeGroup>[]),
      ) as _i6.Future<List<_i3.ChallengeGroup>>);

  @override
  _i6.Future<void> updateGroup(_i3.ChallengeGroup? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [group],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [groupId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<String>> getGroupMembers(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembers,
          [groupId],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  _i6.Future<void> inviteUserToGroup(
    String? groupId,
    String? inviterId,
    String? inviteeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #inviteUserToGroup,
          [
            groupId,
            inviterId,
            inviteeId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> respondToGroupInvite(
    String? inviteId,
    bool? accept,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToGroupInvite,
          [
            inviteId,
            accept,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeUserFromGroup(
    String? groupId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserFromGroup,
          [
            groupId,
            userId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> hasCheckedInOnDate(
    String? userId,
    String? challengeId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasCheckedInOnDate,
          [
            userId,
            challengeId,
            date,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> hasCheckedInToday(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasCheckedInToday,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i7.ChallengeProgress>> getGroupRanking(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupRanking,
          [groupId],
        ),
        returnValue: _i6.Future<List<_i7.ChallengeProgress>>.value(
            <_i7.ChallengeProgress>[]),
      ) as _i6.Future<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<List<_i3.ChallengeGroupInvite>> getPendingInvites(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingInvites,
          [userId],
        ),
        returnValue: _i6.Future<List<_i3.ChallengeGroupInvite>>.value(
            <_i3.ChallengeGroupInvite>[]),
      ) as _i6.Future<List<_i3.ChallengeGroupInvite>>);

  @override
  _i6.Future<int> getConsecutiveDaysCount(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsecutiveDaysCount,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> getCurrentStreak(
    String? userId,
    String? challengeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentStreak,
          [
            userId,
            challengeId,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<_i4.CheckInResult> recordChallengeCheckIn({
    required String? challengeId,
    required String? userId,
    String? workoutId,
    required String? workoutName,
    required String? workoutType,
    required DateTime? date,
    required int? durationMinutes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordChallengeCheckIn,
          [],
          {
            #challengeId: challengeId,
            #userId: userId,
            #workoutId: workoutId,
            #workoutName: workoutName,
            #workoutType: workoutType,
            #date: date,
            #durationMinutes: durationMinutes,
          },
        ),
        returnValue: _i6.Future<_i4.CheckInResult>.value(_FakeCheckInResult_2(
          this,
          Invocation.method(
            #recordChallengeCheckIn,
            [],
            {
              #challengeId: challengeId,
              #userId: userId,
              #workoutId: workoutId,
              #workoutName: workoutName,
              #workoutType: workoutType,
              #date: date,
              #durationMinutes: durationMinutes,
            },
          ),
        )),
      ) as _i6.Future<_i4.CheckInResult>);

  @override
  _i6.Future<void> addBonusPoints(
    String? userId,
    String? challengeId,
    int? points,
    String? reason,
    String? userName,
    String? userPhotoUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBonusPoints,
          [
            userId,
            challengeId,
            points,
            reason,
            userName,
            userPhotoUrl,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<List<_i7.ChallengeProgress>> watchChallengeRanking(
          {required String? challengeId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchChallengeRanking,
          [],
          {#challengeId: challengeId},
        ),
        returnValue: _i6.Stream<List<_i7.ChallengeProgress>>.empty(),
      ) as _i6.Stream<List<_i7.ChallengeProgress>>);

  @override
  _i6.Stream<List<_i7.ChallengeProgress>> watchGroupRanking(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchGroupRanking,
          [groupId],
        ),
        returnValue: _i6.Stream<List<_i7.ChallengeProgress>>.empty(),
      ) as _i6.Stream<List<_i7.ChallengeProgress>>);

  @override
  _i6.Future<List<_i3.ChallengeGroup>> getUserGroups(String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserGroups,
          [challengeId],
        ),
        returnValue:
            _i6.Future<List<_i3.ChallengeGroup>>.value(<_i3.ChallengeGroup>[]),
      ) as _i6.Future<List<_i3.ChallengeGroup>>);

  @override
  _i6.Future<bool> canAccessGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #canAccessGroup,
          [groupId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, dynamic>> exportChallengeData(String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportChallengeData,
          [challengeId],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<bool> enableNotifications(
    String? challengeId,
    bool? enable,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableNotifications,
          [
            challengeId,
            enable,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> clearCache(String? challengeId) => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [challengeId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> getChallengeWorkoutsCount(String? challengeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeWorkoutsCount,
          [challengeId],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<List<_i8.WorkoutRecordWithUser>> getChallengeWorkoutRecords(
    String? challengeId, {
    int? limit = 20,
    int? offset = 0,
    bool? useCache = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChallengeWorkoutRecords,
          [challengeId],
          {
            #limit: limit,
            #offset: offset,
            #useCache: useCache,
          },
        ),
        returnValue: _i6.Future<List<_i8.WorkoutRecordWithUser>>.value(
            <_i8.WorkoutRecordWithUser>[]),
      ) as _i6.Future<List<_i8.WorkoutRecordWithUser>>);

  @override
  _i6.Future<List<_i8.WorkoutRecordWithUser>> getUserChallengeWorkoutRecords(
    String? challengeId,
    String? userId, {
    int? limit = 50,
    bool? useCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserChallengeWorkoutRecords,
          [
            challengeId,
            userId,
          ],
          {
            #limit: limit,
            #useCache: useCache,
          },
        ),
        returnValue: _i6.Future<List<_i8.WorkoutRecordWithUser>>.value(
            <_i8.WorkoutRecordWithUser>[]),
      ) as _i6.Future<List<_i8.WorkoutRecordWithUser>>);
}
