#!/bin/bash

echo "üçé ========== TESTE CORRE√á√ÉO APPLE SIGN IN - IPAD =========="
echo "üçé Testando corre√ß√£o para erro 'Nonces mismatch'"
echo "üçé Dispositivo alvo: iPad Air (5th generation)"
echo ""

# Verificar se h√° iPad conectado
echo "1Ô∏è‚É£ VERIFICANDO DISPOSITIVOS IPAD"
echo ""

DEVICES=$(flutter devices)
IPAD_FOUND=false

# Procurar por iPad (f√≠sico ou simulador)
if echo "$DEVICES" | grep -i "ipad" > /dev/null; then
    IPAD_ID=$(echo "$DEVICES" | grep -i "ipad" | head -1 | awk '{print $NF}')
    IPAD_NAME=$(echo "$DEVICES" | grep -i "ipad" | head -1 | sed 's/‚Ä¢.*//' | xargs)
    echo "‚úÖ iPad encontrado: $IPAD_NAME"
    echo "üîç Device ID: $IPAD_ID"
    DEVICE_ID="$IPAD_ID"
    IPAD_FOUND=true
    
    # Verificar se √© simulador ou f√≠sico
    if [[ "$IPAD_ID" == *"simulator"* ]]; then
        echo "‚ö†Ô∏è AVISO: iPad Simulador detectado"
        echo "‚ö†Ô∏è Apple Sign In pode n√£o funcionar completamente no simulador"
        echo "‚ö†Ô∏è Para teste definitivo, use iPad f√≠sico"
    else
        echo "‚úÖ iPad f√≠sico detectado - ideal para teste"
    fi
else
    echo "‚ùå Nenhum iPad encontrado"
    echo ""
    echo "üìã PARA CONECTAR IPAD F√çSICO:"
    echo "   1. Conecte iPad via USB ao Mac"
    echo "   2. Desbloqueie o iPad e confie no computador"
    echo "   3. Habilite Developer Mode se necess√°rio"
    echo ""
    echo "üìã PARA USAR SIMULADOR:"
    echo "   1. Abra Xcode"
    echo "   2. Window > Devices and Simulators"
    echo "   3. Simulators > Create a new simulator"
    echo "   4. Escolha iPad Air (5th generation)"
    echo ""
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ PREPARANDO TESTE"
echo ""

# Limpar build anterior
echo "üßπ Limpando build anterior..."
flutter clean > /dev/null 2>&1
flutter pub get > /dev/null 2>&1

echo "üî® Compilando vers√£o corrigida..."
echo ""

echo "3Ô∏è‚É£ EXECUTANDO APP NO IPAD"
echo ""
echo "üì± Dispositivo: $IPAD_NAME"
echo "üîç Device ID: $DEVICE_ID"
echo ""
echo "üß™ INSTRU√á√ïES DE TESTE:"
echo "   1. Aguarde o app abrir no iPad"
echo "   2. Navegue at√© a tela de login"
echo "   3. Toque no bot√£o 'Continuar com Apple'"
echo "   4. Observe os logs abaixo"
echo "   5. Verifique se N√ÉO aparece mais 'Nonces mismatch'"
echo ""
echo "‚úÖ LOGS ESPERADOS DE SUCESSO:"
echo "   - ‚úÖ Sign in with Apple est√° dispon√≠vel"
echo "   - ‚úÖ Credenciais Apple obtidas com sucesso"
echo "   - ‚úÖ Identity token obtido"
echo "   - ‚úÖ Autentica√ß√£o Apple conclu√≠da com sucesso!"
echo ""
echo "‚ùå ERROS QUE DEVEM ESTAR CORRIGIDOS:"
echo "   - ‚ùå Nonces mismatch (CORRIGIDO)"
echo "   - ‚ùå Error 1000 (MELHORADO)"
echo ""
echo "üìä LOGS EM TEMPO REAL:"
echo "=========================================="

# Executar no iPad com filtro para Apple Sign In
flutter run --device-id "$DEVICE_ID" --verbose 2>&1 | grep -E "(üçé|Apple|apple|signin|SignIn|auth|Auth|error|Error|Exception|exception|nonce|Nonce)" --line-buffered || {
    echo ""
    echo "‚ùå Erro ao executar o app"
    echo "üí° Poss√≠veis solu√ß√µes:"
    echo "   - Verificar se o iPad est√° desbloqueado"
    echo "   - Verificar se o desenvolvimento est√° habilitado"
    echo "   - Tentar reconectar o iPad"
    echo ""
    exit 1
}

echo ""
echo "üçé ========== TESTE FINALIZADO =========="
echo ""
echo "üìù PR√ìXIMOS PASSOS:"
echo "   1. Se Apple Sign In funcionou: ‚úÖ Corre√ß√£o bem-sucedida!"
echo "   2. Se ainda h√° erros: Analisar logs espec√≠ficos"
echo "   3. Testar em iPad f√≠sico se usou simulador"
echo "   4. Documentar resultados para resubmiss√£o Apple Store" 