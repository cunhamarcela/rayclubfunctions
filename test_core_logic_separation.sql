-- ============================================================================
-- TESTE DA L√ìGICA CENTRAL: record_workout_basic + process_workout_for_ranking
-- ============================================================================

-- Verificar se as fun√ß√µes centrais existem
SELECT 
    'üîß VERIFICA√á√ÉO DAS FUN√á√ïES CENTRAIS' as titulo,
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'record_workout_basic')
        THEN '‚úÖ record_workout_basic existe'
        ELSE '‚ùå record_workout_basic N√ÉO existe'
    END as func_registro,
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'process_workout_for_ranking_one_per_day')
        THEN '‚úÖ process_workout_for_ranking_one_per_day existe'
        ELSE '‚ùå process_workout_for_ranking_one_per_day N√ÉO existe'
    END as func_ranking;

-- Dados para teste
SELECT 
    'üìã DADOS PARA TESTE' as titulo,
    '906a27bc-ccff-4c74-ad83-37692782305a'::uuid as user_id,
    'Teste' as user_name,
    '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'::uuid as challenge_id,
    'Desafio Ray 21' as challenge_name;

-- ============================================================================
-- TESTE 1: TREINO CURTO (< 45min) - DUAS ETAPAS SEPARADAS
-- ============================================================================

SELECT 'üß™ TESTE 1: Treino curto (30min) - ETAPA 1: Registrar treino' as teste_executando;

-- ETAPA 1: Registrar o treino (SEMPRE registra)
SELECT record_workout_basic(
    '906a27bc-ccff-4c74-ad83-37692782305a'::uuid,  -- user_id
    'Teste Curto Separado',                         -- workout_name
    'Cardio',                                        -- workout_type
    30,                                              -- duration_minutes (< 45)
    NOW(),                                           -- date
    '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'::uuid,  -- challenge_id
    'test-short-sep-' || extract(epoch from now())::text -- workout_id
) as resultado_registro_treino_curto;

-- Verificar se o treino foi registrado
SELECT 'üìù VERIFICA√á√ÉO: Treino curto foi registrado?' as verificacao;

SELECT 
    wr.id,
    wr.workout_name,
    wr.duration_minutes || ' min' as duracao,
    'Registrado em workout_records' as status
FROM workout_records wr
WHERE wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
AND wr.workout_name = 'Teste Curto Separado'
AND wr.created_at > NOW() - INTERVAL '2 minutes';

-- ETAPA 2: Processar para ranking (deve FALHAR nas valida√ß√µes)
SELECT 'üß™ TESTE 1: Treino curto (30min) - ETAPA 2: Processar para ranking' as teste_executando;

-- Pegar o ID do treino registrado para processar
WITH workout_id AS (
    SELECT wr.id
    FROM workout_records wr
    WHERE wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
    AND wr.workout_name = 'Teste Curto Separado'
    AND wr.created_at > NOW() - INTERVAL '2 minutes'
    LIMIT 1
)
SELECT 
    w.id as workout_record_id,
    process_workout_for_ranking_one_per_day(w.id) as resultado_processamento
FROM workout_id w;

-- Verificar se N√ÉO gerou check-in
SELECT '‚ùå VERIFICA√á√ÉO: Treino curto N√ÉO deve gerar check-in' as verificacao;

SELECT 
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM challenge_check_ins cci 
            WHERE cci.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
            AND cci.workout_name = 'Teste Curto Separado'
        )
        THEN '‚úÖ CORRETO: Treino curto N√ÉO gerou check-in'
        ELSE '‚ùå ERRO: Treino curto GEROU check-in indevidamente'
    END as resultado_validacao;

-- ============================================================================
-- TESTE 2: TREINO V√ÅLIDO (>= 45min) - DUAS ETAPAS SEPARADAS
-- ============================================================================

SELECT 'üß™ TESTE 2: Treino v√°lido (60min) - ETAPA 1: Registrar treino' as teste_executando;

-- ETAPA 1: Registrar o treino (SEMPRE registra)
SELECT record_workout_basic(
    '906a27bc-ccff-4c74-ad83-37692782305a'::uuid,  -- user_id
    'Teste V√°lido Separado',                        -- workout_name
    'CrossFit',                                      -- workout_type
    60,                                              -- duration_minutes (>= 45)
    NOW(),                                           -- date
    '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'::uuid,  -- challenge_id
    'test-valid-sep-' || extract(epoch from now())::text -- workout_id
) as resultado_registro_treino_valido;

-- Verificar se o treino foi registrado
SELECT 'üìù VERIFICA√á√ÉO: Treino v√°lido foi registrado?' as verificacao;

SELECT 
    wr.id,
    wr.workout_name,
    wr.duration_minutes || ' min' as duracao,
    'Registrado em workout_records' as status
FROM workout_records wr
WHERE wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
AND wr.workout_name = 'Teste V√°lido Separado'
AND wr.created_at > NOW() - INTERVAL '2 minutes';

-- ETAPA 2: Processar para ranking (deve PASSAR nas valida√ß√µes)
SELECT 'üß™ TESTE 2: Treino v√°lido (60min) - ETAPA 2: Processar para ranking' as teste_executando;

-- Pegar o ID do treino registrado para processar
WITH workout_id AS (
    SELECT wr.id
    FROM workout_records wr
    WHERE wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
    AND wr.workout_name = 'Teste V√°lido Separado'
    AND wr.created_at > NOW() - INTERVAL '2 minutes'
    LIMIT 1
)
SELECT 
    w.id as workout_record_id,
    process_workout_for_ranking_one_per_day(w.id) as resultado_processamento
FROM workout_id w;

-- Aguardar processamento
SELECT pg_sleep(1) as aguardando_processamento;

-- Verificar se GEROU check-in
SELECT '‚úÖ VERIFICA√á√ÉO: Treino v√°lido DEVE gerar check-in' as verificacao;

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM challenge_check_ins cci 
            WHERE cci.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
            AND cci.workout_name = 'Teste V√°lido Separado'
            AND cci.points = 10
        )
        THEN '‚úÖ CORRETO: Treino v√°lido GEROU check-in com 10 pontos'
        ELSE '‚ùå ERRO: Treino v√°lido N√ÉO gerou check-in'
    END as resultado_validacao;

-- ============================================================================
-- AN√ÅLISE DETALHADA DOS RESULTADOS
-- ============================================================================

SELECT 'üìä AN√ÅLISE DETALHADA DOS RESULTADOS' as secao;

-- Todos os treinos registrados (independente de check-in)
SELECT 'üìù TODOS OS TREINOS REGISTRADOS:' as subsecao;

SELECT 
    wr.workout_name,
    wr.duration_minutes || ' min' as duracao,
    'SIM' as tem_desafio,
    wr.created_at,
    'SEMPRE REGISTRADO' as observacao
FROM workout_records wr
WHERE wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
AND wr.workout_name IN ('Teste Curto Separado', 'Teste V√°lido Separado')
AND wr.created_at > NOW() - INTERVAL '10 minutes'
ORDER BY wr.created_at DESC;

-- Apenas os check-ins v√°lidos (que passaram nas valida√ß√µes)
SELECT '‚úÖ APENAS CHECK-INS V√ÅLIDOS:' as subsecao;

SELECT 
    cci.workout_name,
    cci.duration_minutes || ' min' as duracao,
    cci.points || ' pontos' as pontuacao,
    cci.created_at,
    'PASSOU NAS VALIDA√á√ïES' as observacao
FROM challenge_check_ins cci
WHERE cci.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
AND cci.challenge_id = '29c91ea0-7dc1-486f-8e4a-86686cbf5f82'::uuid
AND cci.workout_name IN ('Teste Curto Separado', 'Teste V√°lido Separado')
AND cci.created_at > NOW() - INTERVAL '10 minutes'
ORDER BY cci.created_at DESC;

-- Logs de erro (treinos que falharam nas valida√ß√µes)
SELECT '‚ö†Ô∏è LOGS DE VALIDA√á√ÉO:' as subsecao;

SELECT 
    cel.error_message,
    cel.status,
    cel.created_at,
    'FALHOU NAS VALIDA√á√ïES' as observacao
FROM check_in_error_logs cel
WHERE cel.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid
AND cel.created_at > NOW() - INTERVAL '10 minutes'
ORDER BY cel.created_at DESC;

-- ============================================================================
-- VALIDA√á√ÉO FINAL DA L√ìGICA SEPARADA
-- ============================================================================

SELECT 'üéØ VALIDA√á√ÉO DA L√ìGICA SEPARADA' as secao;

WITH contadores AS (
    SELECT 
        COUNT(*) FILTER (WHERE wr.workout_name IN ('Teste Curto Separado', 'Teste V√°lido Separado')) as treinos_registrados,
        COUNT(*) FILTER (WHERE cci.workout_name IN ('Teste Curto Separado', 'Teste V√°lido Separado')) as checkins_validos
    FROM workout_records wr
    FULL OUTER JOIN challenge_check_ins cci ON wr.user_id = cci.user_id
    WHERE (wr.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid OR cci.user_id = '906a27bc-ccff-4c74-ad83-37692782305a'::uuid)
    AND (wr.created_at > NOW() - INTERVAL '10 minutes' OR cci.created_at > NOW() - INTERVAL '10 minutes')
)
SELECT 
    c.treinos_registrados || ' treinos registrados (record_workout_basic)' as etapa_1,
    c.checkins_validos || ' check-ins v√°lidos (process_workout_for_ranking)' as etapa_2,
    CASE 
        WHEN c.treinos_registrados = 2 AND c.checkins_validos = 1
        THEN '‚úÖ PERFEITO: 2 treinos registrados, 1 check-in v√°lido'
        ELSE '‚ùå ERRO: Comportamento inesperado'
    END as resultado_final
FROM contadores c;

SELECT 'üéØ TESTE DAS FUN√á√ïES CENTRAIS CONCLU√çDO!' as status_final;

-- Resumo da l√≥gica
SELECT 'üìã RESUMO DA L√ìGICA CENTRAL:' as resumo;

SELECT 
    'record_workout_basic()' as funcao,
    'SEMPRE registra o treino' as comportamento,
    'workout_records' as tabela_afetada,
    'Hist√≥rico completo' as finalidade

UNION ALL

SELECT 
    'process_workout_for_ranking_one_per_day()' as funcao,
    'S√ì cria check-in se passar valida√ß√µes' as comportamento,
    'challenge_check_ins + challenge_progress' as tabela_afetada,
    'Pontua√ß√£o e ranking' as finalidade; 