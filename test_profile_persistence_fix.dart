import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Teste espec√≠fico para verificar se o problema de persist√™ncia do perfil foi resolvido
class ProfilePersistenceTest {
  static final SupabaseClient _client = Supabase.instance.client;

  /// Teste completo de persist√™ncia do perfil com nova implementa√ß√£o
  static Future<void> runProfilePersistenceTest() async {
    debugPrint('üß™ === TESTE DE PERSIST√äNCIA DO PERFIL ===');
    
    try {
      final userId = _client.auth.currentUser?.id;
      if (userId == null) {
        debugPrint('‚ùå Usu√°rio n√£o autenticado');
        return;
      }

      debugPrint('üë§ User ID: $userId');

      // 1. Ler perfil atual
      debugPrint('\n1Ô∏è‚É£ Lendo perfil atual...');
      final currentProfile = await _getCurrentProfile(userId);
      if (currentProfile == null) {
        debugPrint('‚ùå Perfil n√£o encontrado');
        return;
      }

      debugPrint('üìã Perfil atual:');
      debugPrint('   - Nome: "${currentProfile['name']}"');
      debugPrint('   - Telefone: "${currentProfile['phone']}"');
      debugPrint('   - Instagram: "${currentProfile['instagram']}"');
      debugPrint('   - Updated_at: ${currentProfile['updated_at']}');

      // 2. Testar fun√ß√£o de diagn√≥stico
      debugPrint('\n2Ô∏è‚É£ Executando diagn√≥stico...');
      final diagnosticResult = await _client.rpc('diagnose_profile_update', params: {
        'p_user_id': userId,
      });
      
      debugPrint('üîç Resultado do diagn√≥stico: $diagnosticResult');

      // 3. Testar update usando fun√ß√£o segura RPC
      debugPrint('\n3Ô∏è‚É£ Testando update com fun√ß√£o segura...');
      
      final testData = {
        'p_user_id': userId,
        'p_name': 'Teste Nome ${DateTime.now().millisecondsSinceEpoch}',
        'p_phone': '(11) ${DateTime.now().millisecondsSinceEpoch.toString().substring(8)}',
        'p_instagram': '@teste_${DateTime.now().millisecondsSinceEpoch}',
      };

      debugPrint('üì§ Enviando dados via RPC:');
      debugPrint('   - Nome: ${testData['p_name']}');
      debugPrint('   - Telefone: ${testData['p_phone']}');
      debugPrint('   - Instagram: ${testData['p_instagram']}');

      final rpcResult = await _client.rpc('safe_update_profile', params: testData);
      debugPrint('‚úÖ Resultado do RPC: $rpcResult');

      // 4. Aguardar um pouco e verificar persist√™ncia
      debugPrint('\n4Ô∏è‚É£ Aguardando e verificando persist√™ncia...');
      await Future.delayed(const Duration(seconds: 2));

      final verificationProfile = await _getCurrentProfile(userId);
      if (verificationProfile == null) {
        debugPrint('‚ùå Falha ao recuperar perfil para verifica√ß√£o');
        return;
      }

      debugPrint('üìã Perfil ap√≥s update:');
      debugPrint('   - Nome: "${verificationProfile['name']}"');
      debugPrint('   - Telefone: "${verificationProfile['phone']}"');
      debugPrint('   - Instagram: "${verificationProfile['instagram']}"');
      debugPrint('   - Updated_at: ${verificationProfile['updated_at']}');

      // 5. Verificar se os dados persistiram corretamente
      debugPrint('\n5Ô∏è‚É£ Verificando persist√™ncia...');
      
      bool persistenceSuccess = true;
      
      if (verificationProfile['name'] != testData['p_name']) {
        debugPrint('‚ùå FALHA: Nome n√£o persistiu');
        debugPrint('   Esperado: ${testData['p_name']}');
        debugPrint('   Obtido: ${verificationProfile['name']}');
        persistenceSuccess = false;
      } else {
        debugPrint('‚úÖ Nome persistiu corretamente');
      }
      
      if (verificationProfile['phone'] != testData['p_phone']) {
        debugPrint('‚ùå FALHA: Telefone n√£o persistiu');
        debugPrint('   Esperado: ${testData['p_phone']}');
        debugPrint('   Obtido: ${verificationProfile['phone']}');
        persistenceSuccess = false;
      } else {
        debugPrint('‚úÖ Telefone persistiu corretamente');
      }
      
      if (verificationProfile['instagram'] != testData['p_instagram']) {
        debugPrint('‚ùå FALHA: Instagram n√£o persistiu');
        debugPrint('   Esperado: ${testData['p_instagram']}');
        debugPrint('   Obtido: ${verificationProfile['instagram']}');
        persistenceSuccess = false;
      } else {
        debugPrint('‚úÖ Instagram persistiu corretamente');
      }

      // 6. Testar update via m√©todo normal do repository
      debugPrint('\n6Ô∏è‚É£ Testando update via repository padr√£o...');
      
      final normalTestData = {
        'name': 'Normal Update ${DateTime.now().millisecondsSinceEpoch}',
        'phone': '(22) ${DateTime.now().millisecondsSinceEpoch.toString().substring(8)}',
        'instagram': '@normal_${DateTime.now().millisecondsSinceEpoch}',
        'updated_at': DateTime.now().toIso8601String(),
      };

      await _client
          .from('profiles')
          .update(normalTestData)
          .eq('id', userId);

      await Future.delayed(const Duration(milliseconds: 1500));

      final normalVerification = await _getCurrentProfile(userId);
      
      debugPrint('üìã Resultado do update normal:');
      debugPrint('   - Nome: "${normalVerification?['name']}"');
      debugPrint('   - Telefone: "${normalVerification?['phone']}"');
      debugPrint('   - Instagram: "${normalVerification?['instagram']}"');

      // 7. Resultado final
      debugPrint('\nüéØ === RESULTADO FINAL ===');
      if (persistenceSuccess) {
        debugPrint('‚úÖ SUCESSO: Problema de persist√™ncia resolvido!');
        debugPrint('üîß A fun√ß√£o RPC safe_update_profile est√° funcionando corretamente');
      } else {
        debugPrint('‚ùå FALHA: Problema de persist√™ncia ainda existe');
        debugPrint('üîß Ser√° necess√°ria investiga√ß√£o adicional');
      }

    } catch (e, stackTrace) {
      debugPrint('‚ùå Erro durante o teste: $e');
      debugPrint('üìö Stack trace: $stackTrace');
    }
  }

  /// Busca perfil atual do usu√°rio
  static Future<Map<String, dynamic>?> _getCurrentProfile(String userId) async {
    try {
      final response = await _client
          .from('profiles')
          .select('id, name, phone, instagram, gender, bio, birth_date, updated_at, photo_url, profile_image_url')
          .eq('id', userId)
          .single();

      return response;
    } catch (e) {
      debugPrint('‚ùå Erro ao buscar perfil: $e');
      return null;
    }
  }

  /// Teste espec√≠fico de coluna gerada
  static Future<void> testGeneratedColumn() async {
    debugPrint('\nüß™ === TESTE DE COLUNA GERADA ===');
    
    try {
      final userId = _client.auth.currentUser?.id;
      if (userId == null) {
        debugPrint('‚ùå Usu√°rio n√£o autenticado');
        return;
      }

      // Tentar atualizar photo_url diretamente (deve falhar ou ser ignorado)
      debugPrint('1Ô∏è‚É£ Tentando atualizar photo_url diretamente...');
      
      try {
        await _client
            .from('profiles')
            .update({
              'photo_url': 'https://exemplo.com/nova-foto.jpg',
            })
            .eq('id', userId);
        
        debugPrint('‚ö†Ô∏è Update de photo_url n√£o gerou erro (pode ter sido ignorado)');
      } catch (e) {
        debugPrint('‚ùå Erro esperado ao tentar atualizar photo_url: $e');
      }

      // Atualizar profile_image_url (deve funcionar)
      debugPrint('2Ô∏è‚É£ Atualizando profile_image_url...');
      
      final newImageUrl = 'https://exemplo.com/foto-${DateTime.now().millisecondsSinceEpoch}.jpg';
      
      await _client
          .from('profiles')
          .update({
            'profile_image_url': newImageUrl,
          })
          .eq('id', userId);

      await Future.delayed(const Duration(milliseconds: 1000));

      final result = await _getCurrentProfile(userId);
      
      debugPrint('üìã Resultado:');
      debugPrint('   - profile_image_url: "${result?['profile_image_url']}"');
      debugPrint('   - photo_url: "${result?['photo_url']}"');
      
      if (result?['profile_image_url'] == newImageUrl) {
        debugPrint('‚úÖ profile_image_url atualizado corretamente');
      } else {
        debugPrint('‚ùå profile_image_url n√£o foi atualizado');
      }
      
      if (result?['photo_url'] == newImageUrl) {
        debugPrint('‚úÖ photo_url foi gerado corretamente');
      } else {
        debugPrint('‚ùå photo_url n√£o reflete profile_image_url');
      }

    } catch (e) {
      debugPrint('‚ùå Erro no teste de coluna gerada: $e');
    }
  }
} 